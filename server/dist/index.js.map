{"version":3,"sources":["../index.ts","../widget/DOM.ts","../widget/ExecutionMeta.ts","../widget/MemoryLayer.ts","../widget/elements/BaseElement.ts","../widget/utils/generator.ts","../widget/utils/compiler.ts","../widget/utils/cssProperty.ts","../widget/utils/hyphenateStyleName.ts","../widget/utils/json.ts","../widget/utils/executor.ts","../widget/utils/index.ts","../widget/Runtime.ts","../widget/Creature.ts","../widget/CreatureStore.ts","../widget/FuncStore.ts","../widget/Module.ts","../widget/Applet.ts","../widget/controls/BaseControl.ts","../widget/controls/BoxControl.ts","../widget/props/BaseProp.ts","../widget/props/StringProp.ts","../widget/props/FuncProp.ts","../widget/controls/ButtonControl.ts","../widget/controls/CardControl.ts","../widget/controls/TabsControl.ts","../widget/controls/PrimaryTabControl.ts","../widget/controls/TextControl.ts","../widget/controls/index.ts","../widget/INative.ts"],"sourcesContent":["\nimport Module from './widget/Module'\nimport Applet, { Runnable } from './widget/Applet'\nimport Utils from './widget/utils'\nimport Controls from './widget/controls'\nimport INative from 'widget/INative'\n\nexport {\n    Applet,\n    Runnable,\n    Module,\n    Utils,\n    Controls,\n    INative\n}","\nimport Creature from './Creature'\nimport Module from './Module'\nimport BaseElement from './elements/BaseElement'\n\nclass DOM {\n\n    private _module: Module\n    public get module() { return this._module }\n\n    private _creature: Creature\n    public get creature() { return this._creature }\n\n    private _root?: BaseElement\n    public get root() { return this._root }\n    public setRoot(root: BaseElement) { this._root = root }\n\n    constructor(module: Module, creature?: Creature, root?: BaseElement) {\n        this._module = module\n        this._creature = creature\n        this._root = root\n    }\n}\n\nexport default DOM\n","import Creature from \"./Creature\"\n\nclass ExecutionMeta {\n\n    creature: Creature\n    declaration?: boolean\n    declarationType?: string\n    returnIdParent?: boolean\n    isAnotherCreature?: boolean\n    parentJsxKey: string\n\n    constructor(metaDict: any) {\n        this.creature = metaDict.creature\n        this.declaration = (metaDict.declaration === true)\n        this.declarationType = metaDict.declarationType\n        this.returnIdParent = metaDict.returnIdParent\n        this.isAnotherCreature = metaDict.isAnotherCreature\n        this.parentJsxKey = metaDict.parentJsxKey\n        if (this.declaration && !this.declarationType) {\n            // TODO: throw invalid execution metadata exception\n        }\n    }\n}\n\nexport default ExecutionMeta\n","\nimport Func from \"./Func\"\n\nclass MemoryLayer {\n\n    private _units: { [id: string]: any }\n    public get units() { return this._units }\n    public findUnit(key: string) { return this._units[key] }\n    public putUnit(key: string, unit: any) { this._units[key] = unit }\n    public removeUnit(key: string) { delete this._units[key] }\n\n    constructor(initialUnits?: { [id: string]: any }) {\n        this._units = initialUnits ? initialUnits : {}\n    }\n}\n\nexport default MemoryLayer\n","import BaseProp from \"../props/BaseProp\";\n\nclass BaseElement {\n\n    public _key: string\n    public get key() { return this._key }\n\n    private _controlType: string\n    public get controlType() { return this._controlType }\n\n    public _props: { [key: string]: BaseProp }\n    get props() { return this._props }\n\n    public _styles: { [key: string]: any }\n    get styles() { return this._styles }\n\n    public _children: Array<BaseElement>\n    get children() { return this._children }\n\n    public update(props?: { [id: string]: any }, styles?: { [id: string]: any }, children?: Array<BaseElement>) {\n        if (props) this._props = props\n        if (styles) this._styles = styles\n        if (children) this._children = children\n    }\n\n    constructor(\n        key: string,\n        controlType: string,\n        props: { [key: string]: BaseProp },\n        styles: { [key: string]: any },\n        children?: Array<BaseElement>\n    ) {\n        this._key = key\n        this._controlType = controlType\n        this._props = props;\n        this._styles = styles\n        this._children = children ? children : []\n    }\n}\n\nexport default BaseElement\n","\nimport BaseElement from \"../elements/BaseElement\";\nimport BaseProp from \"../props/BaseProp\";\nimport ExecutionMeta from \"../ExecutionMeta\";\nimport Creature from \"../Creature\";\n\nlet generateKey = () => {\n    return Math.random().toString().substring(2)\n}\n\nfunction clone<T>(instance: T): T {\n    const copy = new (instance.constructor as { new(): T })();\n    Object.assign(copy, instance);\n    return copy;\n}\n\nconst prepareElement = (\n    typeName: string,\n    defaultProps: { [id: string]: BaseProp },\n    overridenProps: { [id: string]: any },\n    defaultStyles: { [id: string]: any },\n    overridenStyles: { [id: string]: any },\n    children: Array<BaseElement>\n) => {\n    let finalProps = {}\n    Object.keys(defaultProps).forEach(propKey => {\n        if (overridenProps[propKey] !== undefined) {\n            let bpProp = defaultProps[propKey]\n            let copiedProp = clone(bpProp)\n            copiedProp.setValue(overridenProps[propKey])\n            finalProps[propKey] = copiedProp\n        }\n    });\n    let finalStyles = { ...defaultStyles }\n    if (overridenStyles) finalStyles = { ...finalStyles, ...overridenStyles }\n    return new BaseElement(overridenProps['key'], typeName, finalProps, finalStyles, children)\n}\n\nconst nestedContext = (creature: Creature, otherMetas?: ExecutionMeta) => {\n    if (otherMetas) {\n        return new ExecutionMeta({ ...otherMetas, creature, isAnotherCreature: true })\n    } else {\n        return new ExecutionMeta({ creature, isAnotherCreature: true })\n    }\n}\n\nexport default { generateKey, prepareElement, nestedContext }\n","\nimport { Parser as AcornParser } from 'acorn';\nimport * as jsx from 'acorn-jsx';\nimport Applet from '../Applet';\nimport Module from '../Module';\nimport cssProperty from './cssProperty';\nimport hyphenateStyleName from './hyphenateStyleName';\n\nlet { isUnitlessNumber } = cssProperty\n\nlet jsxCompiler = AcornParser.extend(jsx());\n\nvar isArray = Array.isArray;\nvar keys = Object.keys;\n\nvar counter = 1;\n// Follows syntax at https://developer.mozilla.org/en-US/docs/Web/CSS/content,\n// including multiple space separated values.\nvar unquotedContentValueRegex = /^(normal|none|(\\b(url\\([^)]*\\)|chapter_counter|attr\\([^)]*\\)|(no-)?(open|close)-quote|inherit)((\\b\\s*)|$|\\s+))+)$/;\n\nfunction buildRule(key, value) {\n    if (!isUnitlessNumber[key] && typeof value === 'number') {\n        value = '' + value + 'px';\n    }\n    else if (key === 'content' && !unquotedContentValueRegex.test(value)) {\n        value = \"'\" + value.replace(/'/g, \"\\\\'\") + \"'\";\n    }\n\n    return hyphenateStyleName(key) + ': ' + value + ';  ';\n}\n\nfunction buildValue(key, value) {\n    if (!isUnitlessNumber[key] && typeof value === 'number') {\n        value = '' + value + 'px';\n    }\n    else if (key === 'content' && !unquotedContentValueRegex.test(value)) {\n        value = \"'\" + value.replace(/'/g, \"\\\\'\") + \"'\";\n    }\n\n    return value + '';\n}\n\nfunction styleToCssString(rules) {\n    var result = ''\n    if (!rules || keys(rules).length === 0) {\n        return result;\n    }\n    var styleKeys = keys(rules);\n    for (var j = 0, l = styleKeys.length; j < l; j++) {\n        var styleKey = styleKeys[j];\n        var value = rules[styleKey];\n\n        if (isArray(value)) {\n            for (var i = 0, len = value.length; i < len; i++) {\n                result += buildRule(styleKey, value[i]);\n            }\n        }\n        else {\n            result += buildRule(styleKey, value);\n        }\n    }\n    return result;\n}\n\nlet parse = (jsxCode: string) => {\n    return jsxCompiler.parse(jsxCode, { sourceType: 'module', ecmaVersion: 'latest' });\n}\n\nlet extractModules = (middleCode: any, applet: Applet) => {\n    return middleCode.body\n        .filter((declaration: any) => declaration.type === 'ClassDeclaration')\n        .map((declaration: any) => {\n            return new Module(declaration.id.name, applet, declaration)\n        })\n}\n\nexport default { parse, extractModules, styleToCssString, buildRule, buildValue }\n","'use strict';\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  boxFlex: true,\n  boxFlexGroup: true,\n  columnCount: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  strokeDashoffset: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Most style properties can be unset by doing .style[prop] = '' but IE8\n * doesn't like doing that with shorthand properties so for the properties that\n * IE8 breaks on, which are listed here, we instead unset each of the\n * individual properties. See http://bugs.jquery.com/ticket/12385.\n * The 4-value 'clock' properties like margin, padding, border-width seem to\n * behave without any problems. Curiously, list-style works too without any\n * special prodding.\n */\nvar shorthandPropertyExpansions = {\n  background: {\n    backgroundImage: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundColor: true\n  },\n  border: {\n    borderWidth: true,\n    borderStyle: true,\n    borderColor: true\n  },\n  borderBottom: {\n    borderBottomWidth: true,\n    borderBottomStyle: true,\n    borderBottomColor: true\n  },\n  borderLeft: {\n    borderLeftWidth: true,\n    borderLeftStyle: true,\n    borderLeftColor: true\n  },\n  borderRight: {\n    borderRightWidth: true,\n    borderRightStyle: true,\n    borderRightColor: true\n  },\n  borderTop: {\n    borderTopWidth: true,\n    borderTopStyle: true,\n    borderTopColor: true\n  },\n  font: {\n    fontStyle: true,\n    fontVariant: true,\n    fontWeight: true,\n    fontSize: true,\n    lineHeight: true,\n    fontFamily: true\n  }\n};\n\nvar CSSProperty = {\n  isUnitlessNumber: isUnitlessNumber,\n  shorthandPropertyExpansions: shorthandPropertyExpansions\n};\n\nexport default CSSProperty\n","\"use strict\";\n\nvar msPattern = /^ms-/;\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nexport default hyphenateStyleName\n","\nimport BaseElement from \"../elements/BaseElement\"\n\nlet prettify = (obj: any) => {\n    return JSON.stringify(obj, undefined, 4)\n}\n\nlet updates = []\n\nlet findChanges = (parentKey: string, el1: BaseElement, el2: BaseElement) => {\n    if (el1._key !== el2._key) {\n        updates.push(\n            {\n                __action__: 'element_deleted',\n                __key__: el1._key,\n                __parentKey__: parentKey\n            },\n            {\n                __action__: 'element_created',\n                __key__: el2._key,\n                __element__: el2,\n                __parentKey__: parentKey\n            }\n        )\n        return\n    }\n    let propsChanges = { __action__: 'props_updated', __key__: el2._key, __created__: {}, __deleted__: {}, __updated__: {} }\n    for (let pKey in el2._props) {\n        if (el1._props[pKey] === undefined) {\n            propsChanges.__created__[pKey] = el2._props[pKey]\n        }\n    }\n    for (let pKey in el1._props) {\n        if (el2._props[pKey] === undefined) {\n            propsChanges.__deleted__[pKey] = el2._props[pKey]\n        }\n    }\n    for (let pKey in el2._props) {\n        if (el1._props[pKey] !== undefined && el2._props[pKey] !== undefined) {\n            if (el1._props[pKey].getValue() !== el2._props[pKey].getValue()) {\n                propsChanges.__updated__[pKey] = el2._props[pKey]\n            }\n        }\n    }\n    if (\n        (Object.keys(propsChanges.__created__).length > 0) ||\n        (Object.keys(propsChanges.__deleted__).length > 0) ||\n        (Object.keys(propsChanges.__updated__).length > 0)\n    ) {\n        updates.push(propsChanges)\n    }\n    let stylesChanges = { __action__: 'styles_updated', __key__: el2._key, __created__: {}, __deleted__: {}, __updated__: {} }\n    for (let sKey in el2._styles) {\n        if (el1._styles[sKey] === undefined) {\n            stylesChanges.__created__[sKey] = el2._styles[sKey]\n        }\n    }\n    for (let sKey in el1._styles) {\n        if (el2._styles[sKey] === undefined) {\n            stylesChanges.__deleted__[sKey] = el2._styles[sKey]\n        }\n    }\n    for (let sKey in el2._styles) {\n        if (el1._styles[sKey] !== undefined && el2._styles[sKey] !== undefined) {\n            if (el1._styles[sKey] !== el2._styles[sKey]) {\n                stylesChanges.__updated__[sKey] = el2._styles[sKey]\n            }\n        }\n    }\n    if (\n        (Object.keys(stylesChanges.__created__).length > 0) ||\n        (Object.keys(stylesChanges.__deleted__).length > 0) ||\n        (Object.keys(stylesChanges.__updated__).length > 0)\n    ) {\n        updates.push(stylesChanges)\n    }\n    let cs = {}\n    el2._children.forEach(child => { cs[child._key] = child })\n    el1._children.forEach(child => {\n        if (cs[child._key]) {\n            findChanges(el1._key, child, cs[child._key])\n        } else {\n            updates.push(\n                {\n                    __action__: 'element_deleted',\n                    __key__: child._key,\n                    __parentKey__: el1._key\n                }\n            )\n        }\n    })\n    cs = {}\n    el1._children.forEach(child => { cs[child._key] = child })\n    el2._children.forEach(child => {\n        if (!cs[child._key]) {\n            updates.push(\n                {\n                    __action__: 'element_created',\n                    __key__: child._key,\n                    __element__: child,\n                    __parentKey__: el2._key\n                }\n            )\n        }\n    })\n}\n\nlet diff = (el1: BaseElement, el2: BaseElement) => {\n    updates = []\n    findChanges(undefined, el1, el2)\n    return updates\n}\n\nexport default { prettify, diff }\n","\nimport BaseElement from \"../elements/BaseElement\"\nimport Creature from \"../Creature\"\nimport Controls from '../controls/index'\nimport ExecutionMeta from \"../ExecutionMeta\"\nimport Utils from '.'\n\nlet executeSingle = (code: any, meta: ExecutionMeta) => {\n    let callback = codeCallbacks[code.type]\n    if (callback) {\n        let r = callback(code, meta)\n        return r\n    } else {\n        return code\n    }\n}\n\nlet executeBlock = (codes: Array<any>, meta: ExecutionMeta) => {\n    for (let i = 0; i < codes.length; i++) {\n        let code = codes[i]\n        let r = executeSingle(code, meta)\n        if (r?.returnFired) return r\n    }\n}\n\nlet findLayer = (meta: ExecutionMeta, id: string) => {\n    for (let i = meta.creature.runtime.stack.length - 1; i >= 0; i--) {\n        let r = meta.creature._runtime.stack[i].findUnit(id)\n        if (r !== undefined) {\n            return meta.creature.runtime.stack[i]\n        }\n    }\n}\n\nconst generateCallbackFunction = (code: any, meta: ExecutionMeta) => {\n    let newMetaBranch = meta\n    return (...args: Array<any>) => {\n        let parameters = {}\n        code.params.forEach((param: any, index: number) => {\n            parameters[param.name] = args[index]\n        })\n        let firstParam = args[0]\n        if (firstParam && (firstParam instanceof ExecutionMeta) && firstParam.isAnotherCreature) {\n            newMetaBranch = firstParam\n        }\n        newMetaBranch.creature.runtime.pushOnStack(parameters)\n        let result = executeSingle(code.body, newMetaBranch)\n        newMetaBranch.creature.runtime.popFromStack()\n        return result?.value\n    }\n}\n\nlet codeCallbacks = {\n    UnaryExpression: (code: any, meta: ExecutionMeta) => {\n        if (code.operator === '!') {\n            return !executeSingle(code.argument, meta)\n        }\n    },\n    LogicalExpression: (code: any, meta: ExecutionMeta) => {\n        if (code.operator === '&&') {\n            return executeSingle(code.left, meta) && executeSingle(code.right, meta)\n        } else if (code.operator === '||') {\n            return executeSingle(code.left, meta) || executeSingle(code.right, meta)\n        }\n    },\n    ConditionalExpression: (code: any, meta: ExecutionMeta) => {\n        return executeSingle(code.test, meta) ? executeSingle(code.consequent, meta) : executeSingle(code.alternate, meta)\n    },\n    ThisExpression: (code: any, meta: ExecutionMeta) => {\n        return meta.creature.thisObj\n    },\n    JSXExpressionContainer: (code: any, meta: ExecutionMeta) => {\n        return executeSingle(code.expression, meta)\n    },\n    JSXText: (code: any, meta: ExecutionMeta) => {\n        return code.value.trim();\n    },\n    JSXElement: (code: any, meta: ExecutionMeta) => {\n        if (!code.cosmoId) code.cosmoId = Utils.generator.generateKey()\n        let Control = meta.creature.module.applet.findModule(code.openingElement.name.name)\n        let attrs = {}\n        code.openingElement.attributes.forEach((attr: any) => {\n            attrs[attr.name.name] = executeSingle(attr.value, meta)\n        })\n   \n        let key = attrs['key']\n        if (key === undefined) {\n            key = code.cosmoId\n        }\n        if (meta.parentJsxKey) key = meta.parentJsxKey + '-' + key\n        attrs['key'] = key\n\n        let c = meta.creature.module.applet.cache.elements[key];\n        let isNew = (c === undefined)\n\n        c = Control.instantiate(attrs, attrs['style'], [], c?.thisObj)\n\n        let childMeta = new ExecutionMeta({ ...meta, parentJsxKey: key })\n        let children = code.children.map((child: any) => executeSingle(child, childMeta))\n            .flat(Infinity).filter((child: any) => (child !== ''))\n        c.fillChildren(children)\n        if (meta.parentJsxKey) c.thisObj.parentJsxKey = meta.parentJsxKey\n\n        let newMetaBranch = Utils.generator.nestedContext(c, { ...meta, parentJsxKey: key })\n        meta.creature.module.applet.cache.elements[key] = c\n        if (isNew) c.getBaseMethod('constructor')(newMetaBranch)\n        if (meta.creature.module.applet.firstMount) {\n            c.getBaseMethod('onMount')(newMetaBranch)\n        } else {\n            meta.creature.module.applet.cache.mounts.push(() => c.getBaseMethod('onMount')(newMetaBranch))\n        }\n        let r = c.getBaseMethod('render')(newMetaBranch)\n        if (!meta.creature.module.applet.oldVersions[c._key]) {\n            meta.creature.module.applet.oldVersions[c._key] = r\n        }\n        return r\n    },\n    Program: (code: any, meta: ExecutionMeta) => {\n        code.body.forEach((child: any) => {\n            executeSingle(child, meta)\n        })\n    },\n    Literal: (code: any, meta: ExecutionMeta) => {\n        return code.value\n    },\n    FunctionExpression: (code: any, meta: ExecutionMeta) => {\n        let newCreatureBranch = new Creature(meta.creature.module, { ...meta.creature, runtime: meta.creature.runtime.clone() })\n        let newMetaBranch = new ExecutionMeta({ ...meta, creature: newCreatureBranch })\n        return generateCallbackFunction(code, newMetaBranch)\n    },\n    FunctionDeclaration: (code: any, meta: ExecutionMeta) => {\n        let newCreatureBranch = new Creature(meta.creature.module, { ...meta.creature, runtime: meta.creature.runtime.clone() })\n        let newMetaBranch = new ExecutionMeta({ ...meta, creature: newCreatureBranch })\n        meta.creature.runtime.stackTop.putUnit(code.id.name, generateCallbackFunction(code, newMetaBranch))\n    },\n    MethodDefinition: (code: any, meta: ExecutionMeta) => {\n        meta.creature.runtime.stackTop.putUnit(code.key.name, executeSingle(code.value, meta))\n    },\n    VariableDeclaration: (code: any, meta: ExecutionMeta) => {\n        if (code.kind === 'let') {\n            code.declarations.forEach((d: any) => executeSingle(d, new ExecutionMeta({ ...meta, declaration: true, declarationType: 'let' })));\n        } else if (code.kind === 'const') {\n            code.declarations.forEach((d: any) => executeSingle(d, new ExecutionMeta({ ...meta, declaration: true, declarationType: 'const' })));\n        }\n    },\n    VariableDeclarator: (code: any, meta: ExecutionMeta) => {\n        if (meta?.declaration) {\n            let val = executeSingle(code.init, meta)\n            if (code.id.type === 'ObjectPattern') {\n                code.id.properties.forEach((property: any) => {\n                    meta.creature.runtime.stackTop.putUnit(property.key.name, val[property.key.name])\n                });\n            } else {\n                meta.creature.runtime.stackTop.putUnit(code.id.name, val)\n            }\n        }\n    },\n    Identifier: (code: any, meta: ExecutionMeta) => {\n        if (meta.returnIdParent) {\n            for (let i = meta.creature.runtime.stack.length - 1; i >= 0; i--) {\n                let wrapper = findLayer(meta, code.name)\n                if (wrapper) {\n                    return { parent: wrapper.units, id: code.name }\n                }\n            }\n        } else {\n            for (let i = meta.creature.runtime.stack.length - 1; i >= 0; i--) {\n                let r = meta.creature.runtime.stack[i].findUnit(code.name)\n                if (r !== undefined) {\n                    return r\n                }\n            }\n        }\n    },\n    BinaryExpression: (code: any, meta: ExecutionMeta) => {\n        if (code.operator === '+') {\n            return executeSingle(code.left, meta) + executeSingle(code.right, meta)\n        } else if (code.operator === '-') {\n            return executeSingle(code.left, meta) - executeSingle(code.right, meta)\n        } else if (code.operator === '*') {\n            return executeSingle(code.left, meta) * executeSingle(code.right, meta)\n        } else if (code.operator === '/') {\n            return executeSingle(code.left, meta) / executeSingle(code.right, meta)\n        } else if (code.operator === '^') {\n            return Math.pow(executeSingle(code.left, meta), executeSingle(code.right, meta))\n        } else if (code.operator === '%') {\n            return executeSingle(code.left, meta) % executeSingle(code.right, meta)\n        } else if (code.operator === '===') {\n            return executeSingle(code.left, meta) === executeSingle(code.right, meta)\n        } else if (code.operator === '<') {\n            return executeSingle(code.left, meta) < executeSingle(code.right, meta)\n        } else if (code.operator === '>') {\n            return executeSingle(code.left, meta) > executeSingle(code.right, meta)\n        } else if (code.operator === '&') {\n            return executeSingle(code.left, meta) & executeSingle(code.right, meta)\n        } else if (code.operator === '|') {\n            return executeSingle(code.left, meta) | executeSingle(code.right, meta)\n        }\n    },\n    IfStatement: (code: any, meta: ExecutionMeta) => {\n        if (executeSingle(code.test, meta)) {\n            let r = executeSingle(code.consequent, meta)\n            if (r?.breakFired) return r\n            else if (r?.returnFired) return r\n        } else if (code.alternate) {\n            let r = executeSingle(code.alternate, meta)\n            if (r?.breakFired) return r\n            else if (r?.returnFired) return r\n        }\n    },\n    BreakStatement: (code: any, meta: ExecutionMeta) => {\n        return { breakFired: true };\n    },\n    WhileStatement: (code: any, meta: ExecutionMeta) => {\n        while (executeSingle(code.test, meta)) {\n            let r = executeSingle(code.body, meta)\n            if (r?.breakFired) break\n            else if (r?.returnFired) return r\n        }\n    },\n    BlockStatement: (code: any, meta: ExecutionMeta) => {\n        for (let i = 0; i < code.body?.length; i++) {\n            let r = executeSingle(code.body[i], meta)\n            if (r?.breakFired) return r\n            else if (r?.returnFired) return r\n        }\n    },\n    ExpressionStatement: (code: any, meta: ExecutionMeta) => {\n        return executeSingle(code.expression, meta)\n    },\n    AssignmentExpression: (code: any, meta: ExecutionMeta) => {\n        let right = executeSingle(code.right, meta)\n        let wrapper = executeSingle(code.left, { ...meta, returnIdParent: true })\n        if (wrapper) {\n            if (wrapper.parent !== undefined) {\n                let before = wrapper.parent[wrapper.id]\n                if (code.operator === '=') {\n                    wrapper.parent[wrapper.id] = right\n                } else if (code.operator === '+=') {\n                    wrapper.parent[wrapper.id] = before + right\n                } else if (code.operator === '-=') {\n                    wrapper.parent[wrapper.id] = before - right\n                } else if (code.operator === '*=') {\n                    wrapper.parent[wrapper.id] = before * right\n                } else if (code.operator === '/=') {\n                    wrapper.parent[wrapper.id] = before / right\n                } else if (code.operator === '^=') {\n                    wrapper.parent[wrapper.id] = Math.pow(before, right)\n                } else if (code.operator === '%=') {\n                    wrapper.parent[wrapper.id] = before % right\n                }\n            } else {\n                let layer = findLayer(meta, wrapper.id)\n                if (layer) {\n                    let r = layer.findUnit(wrapper.id)\n                    if (r) {\n                        if (code.operator === '=') {\n                            r = right\n                        } else if (code.operator === '+=') {\n                            r += right\n                        } else if (code.operator === '-=') {\n                            r -= right\n                        } else if (code.operator === '*=') {\n                            r *= right\n                        } else if (code.operator === '/=') {\n                            r /= right\n                        } else if (code.operator === '^=') {\n                            r = Math.pow(r, right)\n                        } else if (code.operator === '%=') {\n                            r %= right\n                        }\n                        layer.putUnit(code.name, r)\n                    }\n                }\n            }\n        }\n    },\n    ForStatement: (code: any, meta: ExecutionMeta) => {\n        for (executeSingle(code.init, meta); executeSingle(code.test, meta); executeSingle(code.update, meta)) {\n            let r = executeSingle(code.body, meta)\n            if (r?.breakFired) break\n            else if (r?.returnFired) return r\n        }\n    },\n    UpdateExpression: (code: any, meta: ExecutionMeta) => {\n        if (['++', '--'].includes(code.operator)) {\n            let wrapper = executeSingle(code.argument, { ...meta, returnIdParent: true })\n            if (wrapper) {\n                if (wrapper.parent !== undefined) {\n                    let before = wrapper.parent[wrapper.id]\n                    if (typeof before === 'number') {\n                        if (code.operator === '++') before++\n                        else if (code.operator === '--') before--\n                        wrapper.parent[wrapper.id] = before\n                    }\n                } else {\n                    let layer = findLayer(meta, wrapper.id)\n                    if (layer) {\n                        let r = layer.findUnit(wrapper.id)\n                        if (r) {\n                            if (typeof r === 'number') {\n                                if (code.operator === '++') r++\n                                else if (code.operator === '--') r--\n                                layer.putUnit(code.name, r)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    CallExpression: (code: any, meta: ExecutionMeta) => {\n        let prop = undefined\n        if (code.property === undefined) {\n            let r = executeSingle(code.callee, meta);\n            return r(...code.arguments.map((c: any) => executeSingle(c, meta)));\n        } else {\n            if (code.callee.property.type === 'Identifier') {\n                prop = code.callee.property.name\n            }\n            let r = executeSingle(code.callee.object, meta);\n            return r[prop](...code.arguments.map((c: any) => executeSingle(c, meta)))\n        }\n    },\n    MemberExpression: (code: any, meta: ExecutionMeta) => {\n        let prop = undefined\n        if (code.property === undefined) {\n            let r = executeSingle(code.object, meta);\n            if (meta.returnIdParent) {\n                return { parent: undefined, id: code.name }\n            } else {\n                return r;\n            }\n        } else {\n            if (code.computed) {\n                prop = executeSingle(code.property, meta);\n            } else {\n                if (code.property.type === 'Identifier') {\n                    prop = code.property.name\n                } else if (code.property.type === 'Literal') {\n                    prop = code.property.value;\n                }\n            }\n            let filteredMeta = { ...meta }\n            delete filteredMeta['returnIdParent']\n            let r = executeSingle(code.object, filteredMeta);\n            if (Array.isArray(r)) {\n                let p = r[prop];\n                if (typeof p === 'function') {\n                    return (...args: Array<any>) => {\n                        switch (prop) {\n                            case 'push': {\n                                return r.push(...args)\n                            }\n                            case 'map': {\n                                return r.map(...args)\n                            }\n                            case 'forEach': {\n                                return r.forEach(...args)\n                            }\n                            default: {\n\n                            }\n                        }\n                    }\n                } else {\n                    if (meta.returnIdParent) {\n                        return { parent: r, id: prop }\n                    } else {\n                        return r[prop];\n                    }\n                }\n            } else {\n                if (meta.returnIdParent) {\n                    return { parent: r, id: prop }\n                } else {\n                    return r[prop];\n                }\n            }\n        }\n    },\n    SwitchStatement: (code: any, meta: ExecutionMeta) => {\n        let disc = executeSingle(code.discriminant, meta)\n        for (let i = 0; i < code.cases.length; i++) {\n            let c = code.cases[i]\n            if (c.type === 'SwitchCase') {\n                let caseCond = executeSingle(c.test, meta);\n                if (disc === caseCond) {\n                    for (let j = 0; j < c.consequent.lengthl; j++) {\n                        let co = c.consequent[j]\n                        let r = executeSingle(co, meta)\n                        if (r?.returnFired) return r\n                    }\n                }\n            }\n        }\n    },\n    ArrowFunctionExpression: (code: any, meta: ExecutionMeta) => {\n        let newCreatureBranch = new Creature(meta.creature.module, { ...meta.creature, runtime: meta.creature.runtime.clone() })\n        let newMetaBranch = new ExecutionMeta({ ...meta, creature: newCreatureBranch })\n        return generateCallbackFunction(code, newMetaBranch)\n    },\n    ObjectExpression: (code: any, meta: ExecutionMeta) => {\n        let obj = {}\n        code.properties.forEach((property: any) => {\n            if (property.type === 'Property') {\n                if (property.key.type === 'Identifier') {\n                    obj[property.key.name] = executeSingle(property.value, meta)\n                }\n            } else {\n                if (property.type === 'SpreadElement') {\n                    obj[property.argument.name] = executeSingle(property, meta)\n                }\n            }\n        })\n        return obj\n    },\n    ArrayExpression: (code: any, meta: ExecutionMeta) => {\n        let result = []\n        code.elements.forEach((arrEl: any) => {\n            let r = executeSingle(arrEl, meta)\n            if ((arrEl.type === 'SpreadElement') && Array.isArray(r)) {\n                result.push(...r)\n            } else {\n                result.push(r)\n            }\n        })\n        return result\n    },\n    SpreadElement: (code: any, meta: ExecutionMeta) => {\n        let source = executeSingle(code.argument, meta)\n        if (Array.isArray(source)) {\n            return [...source]\n        } else {\n            return { ...source }\n        }\n    },\n    ReturnStatement: (code: any, meta: ExecutionMeta) => {\n        return { value: executeSingle(code.argument, meta), returnFired: true }\n    }\n}\n\nexport default { executeSingle, executeBlock, ExecutionMeta }\n","\nimport generator from './generator'\nimport compiler from './compiler'\nimport json from './json'\nimport executor from './executor'\n\nexport default { generator, compiler, json, executor }\n","\nimport Creature from './Creature'\nimport INative from './INative'\nimport MemoryLayer from './MemoryLayer'\nimport Memory from './MemoryLayer'\nimport Module from './Module'\nimport Utils from './utils'\n\nclass Runtime {\n\n    private _module: Module\n    public get module() { return this._module }\n\n    private _creature: Creature\n    public get creature() { return this._creature }\n\n    private _native: INative\n    public get native() { return this._native }\n\n    public stack: Array<Memory> = []\n    public pushOnStack(initialUnits?: { [id: string]: any }) { this.stack.push(new MemoryLayer(initialUnits)) }\n    public popFromStack() { this.stack.pop() }\n    public get stackTop() { return this.stack[this.stack.length - 1] }\n    public resetStack() {\n        this.stack = []\n        this.pushOnStack({ ...this._native })\n    }\n\n    public reset() {\n        this.resetStack()\n    }\n\n    public execute(ast: any) {\n        Utils.executor.executeBlock(ast, new Utils.executor.ExecutionMeta({ creature: this._creature }))\n    }\n\n    public load() {\n        this.execute(this.module.ast.body.body)\n    }\n\n    public clone() {\n        let copy = new Runtime(this.module, this.creature, { native: this.native, stack: new Array(...this.stack) })\n        return copy\n    }\n\n    constructor(module: Module, creature?: Creature, reusableTools?: any) {\n        this._module = module\n        this._creature = creature\n        this._native = reusableTools?.native ? reusableTools.native : this._module.applet._nativeBuilder(this._module)\n        if (reusableTools?.stack) {\n            this.stack = reusableTools.stack\n        } else {\n            this.reset()\n        }\n    }\n}\n\n\nexport default Runtime\n","\nimport DOM from \"./DOM\"\nimport ExecutionMeta from \"./ExecutionMeta\"\nimport Module from \"./Module\"\nimport Runtime from \"./Runtime\"\nimport BaseElement from \"./elements/BaseElement\"\nimport Utils from './utils'\n\nclass Creature {\n\n    public _key: string\n    public get key() { return this._key }\n\n    private _cosmoId: string\n    public get cosmoId() { return this._cosmoId }\n    public setCosmoId(cosmoId: string) { this._cosmoId = cosmoId }\n\n    private _module: Module\n    public get module() { return this._module }\n\n    public _runtime: Runtime\n    public get runtime() { return this._runtime }\n\n    public _dom: DOM\n    public get dom() { return this._dom }\n\n    public thisObj: { [id: string]: any }\n\n    public getBaseMethod(methodId: string) {\n        return this._runtime.stack[0].findUnit(methodId)\n    }\n\n    public update(props?: { [id: string]: any }, styles?: { [id: string]: any }, children?: Array<BaseElement>) {\n        this.thisObj = {\n            ...this.thisObj,\n            props,\n            styles,\n            children\n        }\n    }\n\n    public fillChildren(children: Array<BaseElement>) {\n        this.thisObj.children = children\n    }\n\n    constructor(module: Module, defaultValues?: any) {\n        this._key = defaultValues?._key ? defaultValues._key : Utils.generator.generateKey()\n        this._cosmoId = defaultValues?.cosmoId\n        this._module = module\n        this._dom = defaultValues?.dom ? defaultValues.dom : new DOM(this._module, this)\n        this._runtime = defaultValues?.runtime ? defaultValues.runtime : new Runtime(this._module, this)\n        this.thisObj = defaultValues?.thisObj\n        if (!defaultValues?.runtime) {\n            this._runtime.load()\n        }\n        if (!this.thisObj) {\n            this.thisObj = {}\n            Object.keys(this._runtime.stack[0].units).forEach(k => {\n                if (!this._runtime.native[k] || (k === 'constructor')) {\n                    this.thisObj[k] = this._runtime.stack[0].units[k]\n                }\n            })\n            this.thisObj = {}\n        }\n        this.thisObj['setState'] = (stateUpdate: { [id: string]: any }) => {\n            console.log(stateUpdate)\n            this.thisObj['state'] = { ...this.thisObj['state'], ...stateUpdate }\n            let newMetaBranch = new ExecutionMeta({ creature: this, parentJsxKey: this.thisObj['parentJsxKey'] })\n            let newRender = this.getBaseMethod('render')(newMetaBranch)\n            this._module.applet.onCreatureStateChange(this, newRender)\n        }\n    }\n}\n\nexport default Creature\n","\nimport Creature from \"./Creature\"\nimport Func from \"./Func\"\n\nclass CreatureStore {\n\n    private _store: { [id: string]: Creature }\n    public putCreature(creature: Creature) { this._store[creature.key] = creature }\n    public removeCreature(key: string) { delete this._store[key] }\n    public findCreature(key: string) { return this._store[key] }\n\n    constructor() {\n        this._store = {}\n    }\n}\n\nexport default CreatureStore\n","import Func from \"./Func\"\n\nclass FuncStore {\n\n    private _store: { [id: string]: Func }\n    public get store() { return this._store }\n    public putFunc(func: Func) { this._store[func.key] = func }\n    public removeFunc(key: string) { delete this._store[key] }\n    public findFunc(key: string) { return this._store[key] }\n\n    constructor() {\n        this._store = {}\n    }\n}\n\nexport default FuncStore\n","\nimport Applet from \"./Applet\"\nimport Creature from \"./Creature\"\nimport CreatureStore from \"./CreatureStore\"\nimport DOM from \"./DOM\"\nimport FuncStore from \"./FuncStore\"\nimport Runtime from \"./Runtime\"\nimport BaseElement from \"./elements/BaseElement\"\nimport Utils from './utils'\n\nclass Module {\n\n    private _applet: Applet\n    public get applet() { return this._applet }\n    public setApplet(applet: Applet) { this._applet = applet }\n\n    private _creatures: CreatureStore\n    public get creatures() { return this._creatures }\n\n    private _key: string\n    get key() { return this._key }\n\n    private _funcs: FuncStore\n    public get funcs() { return this._funcs }\n\n    private _dom: DOM\n    public get dom() { return this._dom }\n\n    private _ast?: any\n    public get ast() { return this._ast }\n    public setAst(ast: any) { this._ast = ast }\n\n    public instantiate(props?: { [id: string]: any }, styles?: { [id: string]: any }, children?: Array<BaseElement>, thisObj?: any) {\n        let creature = new Creature(\n            this,\n            {\n                cosmoId: props?.key,\n                thisObj: thisObj ?\n                    {\n                        ...thisObj,\n                        props: props ? props : {},\n                        styles: styles ? styles : {},\n                        children: children ? children : []\n                    } : {\n                        props: props ? props : {},\n                        styles: styles ? styles : {},\n                        children: children ? children : []\n                    }\n            }\n        )\n        this._creatures.putCreature(creature)\n        return creature\n    }\n\n    constructor(key: string, applet: Applet, ast?: any) {\n        this._key = key\n        this._applet = applet\n        this._ast = ast\n        this._creatures = new CreatureStore()\n        this._funcs = new FuncStore()\n        this._dom = new DOM(this)\n    }\n}\n\nexport default Module\n","\nimport Module from './Module'\nimport Utils from './utils/index'\nimport INative from './INative'\nimport Creature from './Creature'\nimport BaseElement from './elements/BaseElement'\n\nexport class Runnable {\n\n    root: BaseElement\n    mount: () => void\n\n    constructor(root: BaseElement, mount: () => void) {\n        this.root = root\n        this.mount = mount\n    }\n}\n\nclass Applet {\n\n    _key: string\n    public get key() { return this._key }\n\n    _genesisCreature: Creature\n\n    _nativeBuilder: (mod: Module) => INative\n\n    private _modules: { [id: string]: Module }\n    public findModule(id: string) { return this._modules[id] }\n    public putModule(module: Module) {\n        module.setApplet(this)\n        this._modules[module.key] = module\n    }\n    public removeModule(key: string) { delete this._modules[key] }\n\n    middleCode: any\n\n    public fill(jsxCode: any) {\n        this.middleCode = Utils.compiler.parse(jsxCode)\n        console.log(JSON.stringify(this.middleCode))\n        let r = Utils.compiler.extractModules(this.middleCode, this);\n        r.forEach((module: Module) => this.putModule(module))\n    }\n\n    cache = {\n        elements: {},\n        mounts: []\n    }\n\n    oldVersions = {}\n\n    onCreatureStateChange(creature: Creature, newVersion: BaseElement) {\n        let oldVersion = this.oldVersions[creature._key]\n        this.oldVersions[creature._key] = newVersion\n        let updates = Utils.json.diff(oldVersion, newVersion)\n        updates.forEach((u: any) => {\n            if (u.__action__ === 'element_deleted') {\n                let keys = Object.keys(this.cache.elements).filter(k => {\n                    if (k.startsWith(u.__key__)) {\n                        delete this.cache.elements[k]\n                        return true\n                    } else {\n                        return false\n                    }\n                })\n                if (keys.length > 0) {\n                    let temp = keys[keys.length - 1].split('-')\n                    if (temp.length > 1) {\n                        let temp2 = temp.slice(0, temp.length - 1).join('-')\n                        delete this.cache.elements[temp2]\n                    }\n                }\n            }\n        })\n        this.update(oldVersion._key, updates)\n    }\n\n    update: (key: string, u: any) => void\n    firstMount: boolean = false;\n\n    public run(genesis: string, nativeBuilder: (mod: Module) => INative, update: (key: string, u: any) => void) {\n        return new Promise(resolve => {\n            this._nativeBuilder = nativeBuilder\n            this.update = update\n            this.firstMount = false\n            this.cache.elements = {}\n            this.cache.mounts = []\n            let genesisMod = this._modules[genesis]\n            this._genesisCreature = genesisMod.instantiate()\n            let genesisMetaContext = Utils.generator.nestedContext(this._genesisCreature)\n            this.cache.mounts.push(() => this._genesisCreature.getBaseMethod('onMount')(genesisMetaContext))\n            this._genesisCreature.getBaseMethod('constructor')(genesisMetaContext)\n            let view = this._genesisCreature.getBaseMethod('render')(genesisMetaContext)\n            this.oldVersions[this._genesisCreature._key] = view\n            resolve(\n                new Runnable(\n                    view,\n                    () => {\n                        this.firstMount = true\n                        this.cache.mounts.reverse().forEach((onMount: any) => onMount())\n                    }\n                )\n            )\n        })\n    }\n\n    constructor(key: string, modules?: { [id: string]: Module }) {\n        this._key = key\n        this._modules = modules ? modules : {}\n    }\n}\n\nexport default Applet\n","\nclass BaseControl {\n\n}\n\nexport default BaseControl\n","\nimport BaseControl from './BaseControl';\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\n\nclass BoxControl extends BaseControl {\n\n    public static readonly TYPE = 'box'\n    public static defaultProps = {\n        \n    }\n    public static defaultStyles = {\n        width: 200,\n        height: 200\n    }\n\n    public static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(BoxControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default BoxControl\n","\nabstract class BaseProp {\n\n    _type: string\n    public get type() { return this._type }\n\n    public abstract setValue(value: any): void\n    public abstract getValue(): any\n\n    constructor(type: string) {\n        this._type = type\n    }\n}\n\nexport default BaseProp\n","\nimport BaseProp from './BaseProp'\n\nclass StringProp extends BaseProp {\n\n    _value?: string\n    public get value() { return this._value }\n    public setValue(v: any) { this._value = v}\n    public getValue() { return this._value}\n\n    _defaultValue: string\n    public get defaultValue() { return this._defaultValue }\n\n    constructor(defaultValue: string) {\n        super('string')\n        this._value = defaultValue\n        this._defaultValue = defaultValue\n    }\n}\n\nexport default StringProp\n","\nimport BaseProp from './BaseProp'\n\nclass FuncProp extends BaseProp {\n\n    _value?: () => void\n    public get value() { return this._value }\n    public setValue(v: any) { this._value = v}\n    public getValue() { return this._value}\n\n    _defaultValue?: () => void\n    public get defaultValue() { return this._defaultValue }\n\n    constructor(defaultValue?: () => void) {\n        super('function')\n        this._value = defaultValue\n        this._defaultValue = defaultValue\n    }\n}\n\nexport default FuncProp\n","\nimport BaseControl from './BaseControl';\nimport StringProp from '../props/StringProp'\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\nimport FuncProp from '../props/FuncProp';\n\nclass ButtonControl extends BaseControl {\n\n    public static readonly TYPE = 'button'\n    public static defaultProps = {\n        caption: new StringProp(''),\n        variant: new StringProp('filled'),\n        onClick: new FuncProp(undefined)\n    }\n    public static defaultStyles = {\n        width: 150,\n        height: 'auto'\n    }\n\n    static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(ButtonControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default ButtonControl\n","\nimport BaseControl from './BaseControl';\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\n\nclass CardControl extends BaseControl {\n\n    public static readonly TYPE = 'card'\n    public static defaultProps = {\n        \n    }\n    public static defaultStyles = {\n        width: 200,\n        height: 200,\n        boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px',\n        backgroundColor: '#fff',\n        borderRadius: 4\n    }\n\n    public static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(CardControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default CardControl\n","\nimport BaseControl from './BaseControl';\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\nimport FuncProp from '../props/FuncProp';\n\nclass TabsControl extends BaseControl {\n\n    public static readonly TYPE = 'tabs'\n    public static defaultProps = {\n        onChange: new FuncProp(undefined)\n    }\n    public static defaultStyles = {\n        \n    }\n\n    public static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(TabsControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default TabsControl\n","\nimport BaseControl from './BaseControl';\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\n\nclass PrimaryTabControl extends BaseControl {\n\n    public static readonly TYPE = 'primary-tab'\n    public static defaultProps = {\n        \n    }\n    public static defaultStyles = {\n        \n    }\n\n    public static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(PrimaryTabControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default PrimaryTabControl\n","\nimport BaseControl from './BaseControl';\nimport StringProp from '../props/StringProp'\nimport Utils from '../utils';\nimport BaseElement from '../elements/BaseElement';\n\nclass TextControl extends BaseControl {\n\n    public static readonly TYPE = 'text'\n    public static defaultProps = {\n        text: new StringProp('')\n    }\n    public static defaultStyles = {\n        width: 150,\n        height: 'auto'\n    }\n\n    public static instantiate(overridenProps: { [id: string]: any }, overridenStyles: { [id: string]: any }, children: Array<BaseElement>) {\n        return Utils.generator.prepareElement(TextControl.TYPE, this.defaultProps, overridenProps, this.defaultStyles, overridenStyles, children)\n    }\n}\n\nexport default TextControl\n","\nimport BoxControl from \"./BoxControl\"\nimport ButtonControl from \"./ButtonControl\"\nimport CardControl from \"./CardControl\"\nimport TabsControl from \"./TabsControl\"\nimport PrimaryTabControl from \"./PrimaryTabControl\"\nimport TextControl from \"./TextControl\"\n\nexport default {\n    [TextControl.TYPE]: TextControl,\n    [ButtonControl.TYPE]: ButtonControl,\n    [BoxControl.TYPE]: BoxControl,\n    [CardControl.TYPE]: CardControl,\n    [TabsControl.TYPE]: TabsControl,\n    [PrimaryTabControl.TYPE]: PrimaryTabControl\n}\n","\nimport Module from \"./Module\"\n\nclass INative {\n    \n    public _module: Module\n    public get key() { return this._module.key }\n\n    constructor(module: Module) {\n        this._module = module\n    }\n}\n\nexport default INative\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKA,IAAM,MAAN,MAAU;AAAA,EAGN,IAAW,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAG1C,IAAW,WAAW;AAAE,WAAO,KAAK;AAAA,EAAU;AAAA,EAG9C,IAAW,OAAO;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAC/B,QAAQ,MAAmB;AAAE,SAAK,QAAQ;AAAA,EAAK;AAAA,EAEtD,YAAYA,SAAgB,UAAqB,MAAoB;AACjE,SAAK,UAAUA;AACf,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AACJ;AAEA,IAAO,cAAQ;;;ACtBf,IAAM,gBAAN,MAAoB;AAAA,EAShB,YAAY,UAAe;AACvB,SAAK,WAAW,SAAS;AACzB,SAAK,cAAe,SAAS,gBAAgB;AAC7C,SAAK,kBAAkB,SAAS;AAChC,SAAK,iBAAiB,SAAS;AAC/B,SAAK,oBAAoB,SAAS;AAClC,SAAK,eAAe,SAAS;AAC7B,QAAI,KAAK,eAAe,CAAC,KAAK,iBAAiB;AAAA,IAE/C;AAAA,EACJ;AACJ;AAEA,IAAO,wBAAQ;;;ACrBf,IAAM,cAAN,MAAkB;AAAA,EAGd,IAAW,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EACjC,SAAS,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EAChD,QAAQ,KAAa,MAAW;AAAE,SAAK,OAAO,GAAG,IAAI;AAAA,EAAK;AAAA,EAC1D,WAAW,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EAEzD,YAAY,cAAsC;AAC9C,SAAK,SAAS,eAAe,eAAe,CAAC;AAAA,EACjD;AACJ;AAEA,IAAO,sBAAQ;;;ACdf,IAAM,cAAN,MAAkB;AAAA,EAGd,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAGpC,IAAW,cAAc;AAAE,WAAO,KAAK;AAAA,EAAa;AAAA,EAGpD,IAAI,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EAGjC,IAAI,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAGnC,IAAI,WAAW;AAAE,WAAO,KAAK;AAAA,EAAU;AAAA,EAEhC,OAAO,OAA+B,QAAgC,UAA+B;AACxG,QAAI;AAAO,WAAK,SAAS;AACzB,QAAI;AAAQ,WAAK,UAAU;AAC3B,QAAI;AAAU,WAAK,YAAY;AAAA,EACnC;AAAA,EAEA,YACI,KACA,aACA,OACA,QACA,UACF;AACE,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,YAAY,WAAW,WAAW,CAAC;AAAA,EAC5C;AACJ;AAEA,IAAO,sBAAQ;;;AClCf,IAAI,cAAc,MAAM;AACpB,SAAO,KAAK,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC;AAC/C;AAEA,SAAS,MAAS,UAAgB;AAC9B,QAAM,OAAO,IAAK,SAAS,YAA6B;AACxD,SAAO,OAAO,MAAM,QAAQ;AAC5B,SAAO;AACX;AAEA,IAAM,iBAAiB,CACnB,UACA,cACA,gBACA,eACA,iBACA,aACC;AACD,MAAI,aAAa,CAAC;AAClB,SAAO,KAAK,YAAY,EAAE,QAAQ,aAAW;AACzC,QAAI,eAAe,OAAO,MAAM,QAAW;AACvC,UAAI,SAAS,aAAa,OAAO;AACjC,UAAI,aAAa,MAAM,MAAM;AAC7B,iBAAW,SAAS,eAAe,OAAO,CAAC;AAC3C,iBAAW,OAAO,IAAI;AAAA,IAC1B;AAAA,EACJ,CAAC;AACD,MAAI,cAAc,mBAAK;AACvB,MAAI;AAAiB,kBAAc,kCAAK,cAAgB;AACxD,SAAO,IAAI,oBAAY,eAAe,KAAK,GAAG,UAAU,YAAY,aAAa,QAAQ;AAC7F;AAEA,IAAM,gBAAgB,CAAC,UAAoB,eAA+B;AACtE,MAAI,YAAY;AACZ,WAAO,IAAI,sBAAc,iCAAK,aAAL,EAAiB,UAAU,mBAAmB,KAAK,EAAC;AAAA,EACjF,OAAO;AACH,WAAO,IAAI,sBAAc,EAAE,UAAU,mBAAmB,KAAK,CAAC;AAAA,EAClE;AACJ;AAEA,IAAO,oBAAQ,EAAE,aAAa,gBAAgB,cAAc;;;AC7C5D,mBAAsC;AACtC,UAAqB;;;ACGrB,IAAI,mBAAmB;AAAA,EACrB,SAAS;AAAA,EACT,cAAc;AAAA,EACd,aAAa;AAAA,EACb,MAAM;AAAA,EACN,UAAU;AAAA,EACV,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,OAAO;AAAA,EACP,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,MAAM;AAAA;AAAA,EAGN,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,aAAa;AACf;AAQA,SAAS,UAAU,QAAQ,KAAK;AAC9B,SAAO,SAAS,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,UAAU,CAAC;AAC/D;AAMA,IAAI,WAAW,CAAC,UAAU,MAAM,OAAO,GAAG;AAI1C,OAAO,KAAK,gBAAgB,EAAE,QAAQ,SAAU,MAAM;AACpD,WAAS,QAAQ,SAAU,QAAQ;AACjC,qBAAiB,UAAU,QAAQ,IAAI,CAAC,IAAI,iBAAiB,IAAI;AAAA,EACnE,CAAC;AACH,CAAC;AAWD,IAAI,8BAA8B;AAAA,EAChC,YAAY;AAAA,IACV,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,kBAAkB;AAAA,IAClB,iBAAiB;AAAA,EACnB;AAAA,EACA,QAAQ;AAAA,IACN,aAAa;AAAA,IACb,aAAa;AAAA,IACb,aAAa;AAAA,EACf;AAAA,EACA,cAAc;AAAA,IACZ,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,EACrB;AAAA,EACA,YAAY;AAAA,IACV,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,EACnB;AAAA,EACA,aAAa;AAAA,IACX,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,EACpB;AAAA,EACA,WAAW;AAAA,IACT,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,EAClB;AAAA,EACA,MAAM;AAAA,IACJ,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,YAAY;AAAA,EACd;AACF;AAEA,IAAI,cAAc;AAAA,EAChB;AAAA,EACA;AACF;AAEA,IAAO,sBAAQ;;;AC7Gf,IAAI,YAAY;AAEhB,IAAI,oBAAoB;AAcxB,SAAS,UAAU,QAAQ;AACzB,SAAO,OAAO,QAAQ,mBAAmB,KAAK,EAAE,YAAY;AAC9D;AAkBA,SAAS,mBAAmB,QAAQ;AAClC,SAAO,UAAU,MAAM,EAAE,QAAQ,WAAW,MAAM;AACpD;AAEA,IAAO,6BAAQ;;;AFlCf,IAAI,EAAE,kBAAAC,kBAAiB,IAAI;AAE3B,IAAI,cAAc,aAAAC,OAAY,OAAO,IAAI,CAAC;AAE1C,IAAI,UAAU,MAAM;AACpB,IAAI,OAAO,OAAO;AAKlB,IAAI,4BAA4B;AAEhC,SAAS,UAAU,KAAK,OAAO;AAC3B,MAAI,CAACC,kBAAiB,GAAG,KAAK,OAAO,UAAU,UAAU;AACrD,YAAQ,KAAK,QAAQ;AAAA,EACzB,WACS,QAAQ,aAAa,CAAC,0BAA0B,KAAK,KAAK,GAAG;AAClE,YAAQ,MAAM,MAAM,QAAQ,MAAM,KAAK,IAAI;AAAA,EAC/C;AAEA,SAAO,2BAAmB,GAAG,IAAI,OAAO,QAAQ;AACpD;AAEA,SAAS,WAAW,KAAK,OAAO;AAC5B,MAAI,CAACA,kBAAiB,GAAG,KAAK,OAAO,UAAU,UAAU;AACrD,YAAQ,KAAK,QAAQ;AAAA,EACzB,WACS,QAAQ,aAAa,CAAC,0BAA0B,KAAK,KAAK,GAAG;AAClE,YAAQ,MAAM,MAAM,QAAQ,MAAM,KAAK,IAAI;AAAA,EAC/C;AAEA,SAAO,QAAQ;AACnB;AAEA,SAAS,iBAAiB,OAAO;AAC7B,MAAI,SAAS;AACb,MAAI,CAAC,SAAS,KAAK,KAAK,EAAE,WAAW,GAAG;AACpC,WAAO;AAAA,EACX;AACA,MAAI,YAAY,KAAK,KAAK;AAC1B,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AAC9C,QAAI,WAAW,UAAU,CAAC;AAC1B,QAAI,QAAQ,MAAM,QAAQ;AAE1B,QAAI,QAAQ,KAAK,GAAG;AAChB,eAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC9C,kBAAU,UAAU,UAAU,MAAM,CAAC,CAAC;AAAA,MAC1C;AAAA,IACJ,OACK;AACD,gBAAU,UAAU,UAAU,KAAK;AAAA,IACvC;AAAA,EACJ;AACA,SAAO;AACX;AAEA,IAAI,QAAQ,CAAC,YAAoB;AAC7B,SAAO,YAAY,MAAM,SAAS,EAAE,YAAY,UAAU,aAAa,SAAS,CAAC;AACrF;AAEA,IAAI,iBAAiB,CAAC,YAAiB,WAAmB;AACtD,SAAO,WAAW,KACb,OAAO,CAAC,gBAAqB,YAAY,SAAS,kBAAkB,EACpE,IAAI,CAAC,gBAAqB;AACvB,WAAO,IAAI,eAAO,YAAY,GAAG,MAAM,QAAQ,WAAW;AAAA,EAC9D,CAAC;AACT;AAEA,IAAO,mBAAQ,EAAE,OAAO,gBAAgB,kBAAkB,WAAW,WAAW;;;AGzEhF,IAAI,WAAW,CAAC,QAAa;AACzB,SAAO,KAAK,UAAU,KAAK,QAAW,CAAC;AAC3C;AAEA,IAAI,UAAU,CAAC;AAEf,IAAI,cAAc,CAAC,WAAmB,KAAkB,QAAqB;AACzE,MAAI,IAAI,SAAS,IAAI,MAAM;AACvB,YAAQ;AAAA,MACJ;AAAA,QACI,YAAY;AAAA,QACZ,SAAS,IAAI;AAAA,QACb,eAAe;AAAA,MACnB;AAAA,MACA;AAAA,QACI,YAAY;AAAA,QACZ,SAAS,IAAI;AAAA,QACb,aAAa;AAAA,QACb,eAAe;AAAA,MACnB;AAAA,IACJ;AACA;AAAA,EACJ;AACA,MAAI,eAAe,EAAE,YAAY,iBAAiB,SAAS,IAAI,MAAM,aAAa,CAAC,GAAG,aAAa,CAAC,GAAG,aAAa,CAAC,EAAE;AACvH,WAAS,QAAQ,IAAI,QAAQ;AACzB,QAAI,IAAI,OAAO,IAAI,MAAM,QAAW;AAChC,mBAAa,YAAY,IAAI,IAAI,IAAI,OAAO,IAAI;AAAA,IACpD;AAAA,EACJ;AACA,WAAS,QAAQ,IAAI,QAAQ;AACzB,QAAI,IAAI,OAAO,IAAI,MAAM,QAAW;AAChC,mBAAa,YAAY,IAAI,IAAI,IAAI,OAAO,IAAI;AAAA,IACpD;AAAA,EACJ;AACA,WAAS,QAAQ,IAAI,QAAQ;AACzB,QAAI,IAAI,OAAO,IAAI,MAAM,UAAa,IAAI,OAAO,IAAI,MAAM,QAAW;AAClE,UAAI,IAAI,OAAO,IAAI,EAAE,SAAS,MAAM,IAAI,OAAO,IAAI,EAAE,SAAS,GAAG;AAC7D,qBAAa,YAAY,IAAI,IAAI,IAAI,OAAO,IAAI;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AACA,MACK,OAAO,KAAK,aAAa,WAAW,EAAE,SAAS,KAC/C,OAAO,KAAK,aAAa,WAAW,EAAE,SAAS,KAC/C,OAAO,KAAK,aAAa,WAAW,EAAE,SAAS,GAClD;AACE,YAAQ,KAAK,YAAY;AAAA,EAC7B;AACA,MAAI,gBAAgB,EAAE,YAAY,kBAAkB,SAAS,IAAI,MAAM,aAAa,CAAC,GAAG,aAAa,CAAC,GAAG,aAAa,CAAC,EAAE;AACzH,WAAS,QAAQ,IAAI,SAAS;AAC1B,QAAI,IAAI,QAAQ,IAAI,MAAM,QAAW;AACjC,oBAAc,YAAY,IAAI,IAAI,IAAI,QAAQ,IAAI;AAAA,IACtD;AAAA,EACJ;AACA,WAAS,QAAQ,IAAI,SAAS;AAC1B,QAAI,IAAI,QAAQ,IAAI,MAAM,QAAW;AACjC,oBAAc,YAAY,IAAI,IAAI,IAAI,QAAQ,IAAI;AAAA,IACtD;AAAA,EACJ;AACA,WAAS,QAAQ,IAAI,SAAS;AAC1B,QAAI,IAAI,QAAQ,IAAI,MAAM,UAAa,IAAI,QAAQ,IAAI,MAAM,QAAW;AACpE,UAAI,IAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,IAAI,GAAG;AACzC,sBAAc,YAAY,IAAI,IAAI,IAAI,QAAQ,IAAI;AAAA,MACtD;AAAA,IACJ;AAAA,EACJ;AACA,MACK,OAAO,KAAK,cAAc,WAAW,EAAE,SAAS,KAChD,OAAO,KAAK,cAAc,WAAW,EAAE,SAAS,KAChD,OAAO,KAAK,cAAc,WAAW,EAAE,SAAS,GACnD;AACE,YAAQ,KAAK,aAAa;AAAA,EAC9B;AACA,MAAI,KAAK,CAAC;AACV,MAAI,UAAU,QAAQ,WAAS;AAAE,OAAG,MAAM,IAAI,IAAI;AAAA,EAAM,CAAC;AACzD,MAAI,UAAU,QAAQ,WAAS;AAC3B,QAAI,GAAG,MAAM,IAAI,GAAG;AAChB,kBAAY,IAAI,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC;AAAA,IAC/C,OAAO;AACH,cAAQ;AAAA,QACJ;AAAA,UACI,YAAY;AAAA,UACZ,SAAS,MAAM;AAAA,UACf,eAAe,IAAI;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,CAAC;AACD,OAAK,CAAC;AACN,MAAI,UAAU,QAAQ,WAAS;AAAE,OAAG,MAAM,IAAI,IAAI;AAAA,EAAM,CAAC;AACzD,MAAI,UAAU,QAAQ,WAAS;AAC3B,QAAI,CAAC,GAAG,MAAM,IAAI,GAAG;AACjB,cAAQ;AAAA,QACJ;AAAA,UACI,YAAY;AAAA,UACZ,SAAS,MAAM;AAAA,UACf,aAAa;AAAA,UACb,eAAe,IAAI;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;AAEA,IAAI,OAAO,CAAC,KAAkB,QAAqB;AAC/C,YAAU,CAAC;AACX,cAAY,QAAW,KAAK,GAAG;AAC/B,SAAO;AACX;AAEA,IAAO,eAAQ,EAAE,UAAU,KAAK;;;AC1GhC,IAAI,gBAAgB,CAAC,MAAW,SAAwB;AACpD,MAAI,WAAW,cAAc,KAAK,IAAI;AACtC,MAAI,UAAU;AACV,QAAI,IAAI,SAAS,MAAM,IAAI;AAC3B,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEA,IAAI,eAAe,CAAC,OAAmB,SAAwB;AAC3D,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,QAAI,OAAO,MAAM,CAAC;AAClB,QAAI,IAAI,cAAc,MAAM,IAAI;AAChC,QAAI,uBAAG;AAAa,aAAO;AAAA,EAC/B;AACJ;AAEA,IAAI,YAAY,CAAC,MAAqB,OAAe;AACjD,WAAS,IAAI,KAAK,SAAS,QAAQ,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9D,QAAI,IAAI,KAAK,SAAS,SAAS,MAAM,CAAC,EAAE,SAAS,EAAE;AACnD,QAAI,MAAM,QAAW;AACjB,aAAO,KAAK,SAAS,QAAQ,MAAM,CAAC;AAAA,IACxC;AAAA,EACJ;AACJ;AAEA,IAAM,2BAA2B,CAAC,MAAW,SAAwB;AACjE,MAAI,gBAAgB;AACpB,SAAO,IAAI,SAAqB;AAC5B,QAAI,aAAa,CAAC;AAClB,SAAK,OAAO,QAAQ,CAAC,OAAY,UAAkB;AAC/C,iBAAW,MAAM,IAAI,IAAI,KAAK,KAAK;AAAA,IACvC,CAAC;AACD,QAAI,aAAa,KAAK,CAAC;AACvB,QAAI,cAAe,sBAAsB,yBAAkB,WAAW,mBAAmB;AACrF,sBAAgB;AAAA,IACpB;AACA,kBAAc,SAAS,QAAQ,YAAY,UAAU;AACrD,QAAI,SAAS,cAAc,KAAK,MAAM,aAAa;AACnD,kBAAc,SAAS,QAAQ,aAAa;AAC5C,WAAO,iCAAQ;AAAA,EACnB;AACJ;AAEA,IAAI,gBAAgB;AAAA,EAChB,iBAAiB,CAAC,MAAW,SAAwB;AACjD,QAAI,KAAK,aAAa,KAAK;AACvB,aAAO,CAAC,cAAc,KAAK,UAAU,IAAI;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,mBAAmB,CAAC,MAAW,SAAwB;AACnD,QAAI,KAAK,aAAa,MAAM;AACxB,aAAO,cAAc,KAAK,MAAM,IAAI,KAAK,cAAc,KAAK,OAAO,IAAI;AAAA,IAC3E,WAAW,KAAK,aAAa,MAAM;AAC/B,aAAO,cAAc,KAAK,MAAM,IAAI,KAAK,cAAc,KAAK,OAAO,IAAI;AAAA,IAC3E;AAAA,EACJ;AAAA,EACA,uBAAuB,CAAC,MAAW,SAAwB;AACvD,WAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,YAAY,IAAI,IAAI,cAAc,KAAK,WAAW,IAAI;AAAA,EACrH;AAAA,EACA,gBAAgB,CAAC,MAAW,SAAwB;AAChD,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,wBAAwB,CAAC,MAAW,SAAwB;AACxD,WAAO,cAAc,KAAK,YAAY,IAAI;AAAA,EAC9C;AAAA,EACA,SAAS,CAAC,MAAW,SAAwB;AACzC,WAAO,KAAK,MAAM,KAAK;AAAA,EAC3B;AAAA,EACA,YAAY,CAAC,MAAW,SAAwB;AAC5C,QAAI,CAAC,KAAK;AAAS,WAAK,UAAU,cAAM,UAAU,YAAY;AAC9D,QAAI,UAAU,KAAK,SAAS,OAAO,OAAO,WAAW,KAAK,eAAe,KAAK,IAAI;AAClF,QAAI,QAAQ,CAAC;AACb,SAAK,eAAe,WAAW,QAAQ,CAAC,SAAc;AAClD,YAAM,KAAK,KAAK,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1D,CAAC;AAED,QAAI,MAAM,MAAM,KAAK;AACrB,QAAI,QAAQ,QAAW;AACnB,YAAM,KAAK;AAAA,IACf;AACA,QAAI,KAAK;AAAc,YAAM,KAAK,eAAe,MAAM;AACvD,UAAM,KAAK,IAAI;AAEf,QAAI,IAAI,KAAK,SAAS,OAAO,OAAO,MAAM,SAAS,GAAG;AACtD,QAAI,QAAS,MAAM;AAEnB,QAAI,QAAQ,YAAY,OAAO,MAAM,OAAO,GAAG,CAAC,GAAG,uBAAG,OAAO;AAE7D,QAAI,YAAY,IAAI,sBAAc,iCAAK,OAAL,EAAW,cAAc,IAAI,EAAC;AAChE,QAAI,WAAW,KAAK,SAAS,IAAI,CAAC,UAAe,cAAc,OAAO,SAAS,CAAC,EAC3E,KAAK,QAAQ,EAAE,OAAO,CAAC,UAAgB,UAAU,EAAG;AACzD,MAAE,aAAa,QAAQ;AACvB,QAAI,KAAK;AAAc,QAAE,QAAQ,eAAe,KAAK;AAErD,QAAI,gBAAgB,cAAM,UAAU,cAAc,GAAG,iCAAK,OAAL,EAAW,cAAc,IAAI,EAAC;AACnF,SAAK,SAAS,OAAO,OAAO,MAAM,SAAS,GAAG,IAAI;AAClD,QAAI;AAAO,QAAE,cAAc,aAAa,EAAE,aAAa;AACvD,QAAI,KAAK,SAAS,OAAO,OAAO,YAAY;AACxC,QAAE,cAAc,SAAS,EAAE,aAAa;AAAA,IAC5C,OAAO;AACH,WAAK,SAAS,OAAO,OAAO,MAAM,OAAO,KAAK,MAAM,EAAE,cAAc,SAAS,EAAE,aAAa,CAAC;AAAA,IACjG;AACA,QAAI,IAAI,EAAE,cAAc,QAAQ,EAAE,aAAa;AAC/C,QAAI,CAAC,KAAK,SAAS,OAAO,OAAO,YAAY,EAAE,IAAI,GAAG;AAClD,WAAK,SAAS,OAAO,OAAO,YAAY,EAAE,IAAI,IAAI;AAAA,IACtD;AACA,WAAO;AAAA,EACX;AAAA,EACA,SAAS,CAAC,MAAW,SAAwB;AACzC,SAAK,KAAK,QAAQ,CAAC,UAAe;AAC9B,oBAAc,OAAO,IAAI;AAAA,IAC7B,CAAC;AAAA,EACL;AAAA,EACA,SAAS,CAAC,MAAW,SAAwB;AACzC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB,CAAC,MAAW,SAAwB;AACpD,QAAI,oBAAoB,IAAI,iBAAS,KAAK,SAAS,QAAQ,iCAAK,KAAK,WAAV,EAAoB,SAAS,KAAK,SAAS,QAAQ,MAAM,EAAE,EAAC;AACvH,QAAI,gBAAgB,IAAI,sBAAc,iCAAK,OAAL,EAAW,UAAU,kBAAkB,EAAC;AAC9E,WAAO,yBAAyB,MAAM,aAAa;AAAA,EACvD;AAAA,EACA,qBAAqB,CAAC,MAAW,SAAwB;AACrD,QAAI,oBAAoB,IAAI,iBAAS,KAAK,SAAS,QAAQ,iCAAK,KAAK,WAAV,EAAoB,SAAS,KAAK,SAAS,QAAQ,MAAM,EAAE,EAAC;AACvH,QAAI,gBAAgB,IAAI,sBAAc,iCAAK,OAAL,EAAW,UAAU,kBAAkB,EAAC;AAC9E,SAAK,SAAS,QAAQ,SAAS,QAAQ,KAAK,GAAG,MAAM,yBAAyB,MAAM,aAAa,CAAC;AAAA,EACtG;AAAA,EACA,kBAAkB,CAAC,MAAW,SAAwB;AAClD,SAAK,SAAS,QAAQ,SAAS,QAAQ,KAAK,IAAI,MAAM,cAAc,KAAK,OAAO,IAAI,CAAC;AAAA,EACzF;AAAA,EACA,qBAAqB,CAAC,MAAW,SAAwB;AACrD,QAAI,KAAK,SAAS,OAAO;AACrB,WAAK,aAAa,QAAQ,CAAC,MAAW,cAAc,GAAG,IAAI,sBAAc,iCAAK,OAAL,EAAW,aAAa,MAAM,iBAAiB,MAAM,EAAC,CAAC,CAAC;AAAA,IACrI,WAAW,KAAK,SAAS,SAAS;AAC9B,WAAK,aAAa,QAAQ,CAAC,MAAW,cAAc,GAAG,IAAI,sBAAc,iCAAK,OAAL,EAAW,aAAa,MAAM,iBAAiB,QAAQ,EAAC,CAAC,CAAC;AAAA,IACvI;AAAA,EACJ;AAAA,EACA,oBAAoB,CAAC,MAAW,SAAwB;AACpD,QAAI,6BAAM,aAAa;AACnB,UAAI,MAAM,cAAc,KAAK,MAAM,IAAI;AACvC,UAAI,KAAK,GAAG,SAAS,iBAAiB;AAClC,aAAK,GAAG,WAAW,QAAQ,CAAC,aAAkB;AAC1C,eAAK,SAAS,QAAQ,SAAS,QAAQ,SAAS,IAAI,MAAM,IAAI,SAAS,IAAI,IAAI,CAAC;AAAA,QACpF,CAAC;AAAA,MACL,OAAO;AACH,aAAK,SAAS,QAAQ,SAAS,QAAQ,KAAK,GAAG,MAAM,GAAG;AAAA,MAC5D;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,CAAC,MAAW,SAAwB;AAC5C,QAAI,KAAK,gBAAgB;AACrB,eAAS,IAAI,KAAK,SAAS,QAAQ,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9D,YAAI,UAAU,UAAU,MAAM,KAAK,IAAI;AACvC,YAAI,SAAS;AACT,iBAAO,EAAE,QAAQ,QAAQ,OAAO,IAAI,KAAK,KAAK;AAAA,QAClD;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,eAAS,IAAI,KAAK,SAAS,QAAQ,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9D,YAAI,IAAI,KAAK,SAAS,QAAQ,MAAM,CAAC,EAAE,SAAS,KAAK,IAAI;AACzD,YAAI,MAAM,QAAW;AACjB,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,kBAAkB,CAAC,MAAW,SAAwB;AAClD,QAAI,KAAK,aAAa,KAAK;AACvB,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,KAAK,IAAI,cAAc,KAAK,MAAM,IAAI,GAAG,cAAc,KAAK,OAAO,IAAI,CAAC;AAAA,IACnF,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,OAAO;AAChC,aAAO,cAAc,KAAK,MAAM,IAAI,MAAM,cAAc,KAAK,OAAO,IAAI;AAAA,IAC5E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E,WAAW,KAAK,aAAa,KAAK;AAC9B,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI,cAAc,KAAK,OAAO,IAAI;AAAA,IAC1E;AAAA,EACJ;AAAA,EACA,aAAa,CAAC,MAAW,SAAwB;AAC7C,QAAI,cAAc,KAAK,MAAM,IAAI,GAAG;AAChC,UAAI,IAAI,cAAc,KAAK,YAAY,IAAI;AAC3C,UAAI,uBAAG;AAAY,eAAO;AAAA,eACjB,uBAAG;AAAa,eAAO;AAAA,IACpC,WAAW,KAAK,WAAW;AACvB,UAAI,IAAI,cAAc,KAAK,WAAW,IAAI;AAC1C,UAAI,uBAAG;AAAY,eAAO;AAAA,eACjB,uBAAG;AAAa,eAAO;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,MAAW,SAAwB;AAChD,WAAO,EAAE,YAAY,KAAK;AAAA,EAC9B;AAAA,EACA,gBAAgB,CAAC,MAAW,SAAwB;AAChD,WAAO,cAAc,KAAK,MAAM,IAAI,GAAG;AACnC,UAAI,IAAI,cAAc,KAAK,MAAM,IAAI;AACrC,UAAI,uBAAG;AAAY;AAAA,eACV,uBAAG;AAAa,eAAO;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,MAAW,SAAwB;AA5NxD;AA6NQ,aAAS,IAAI,GAAG,MAAI,UAAK,SAAL,mBAAW,SAAQ,KAAK;AACxC,UAAI,IAAI,cAAc,KAAK,KAAK,CAAC,GAAG,IAAI;AACxC,UAAI,uBAAG;AAAY,eAAO;AAAA,eACjB,uBAAG;AAAa,eAAO;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,qBAAqB,CAAC,MAAW,SAAwB;AACrD,WAAO,cAAc,KAAK,YAAY,IAAI;AAAA,EAC9C;AAAA,EACA,sBAAsB,CAAC,MAAW,SAAwB;AACtD,QAAI,QAAQ,cAAc,KAAK,OAAO,IAAI;AAC1C,QAAI,UAAU,cAAc,KAAK,MAAM,iCAAK,OAAL,EAAW,gBAAgB,KAAK,EAAC;AACxE,QAAI,SAAS;AACT,UAAI,QAAQ,WAAW,QAAW;AAC9B,YAAI,SAAS,QAAQ,OAAO,QAAQ,EAAE;AACtC,YAAI,KAAK,aAAa,KAAK;AACvB,kBAAQ,OAAO,QAAQ,EAAE,IAAI;AAAA,QACjC,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,SAAS;AAAA,QAC1C,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,SAAS;AAAA,QAC1C,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,SAAS;AAAA,QAC1C,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,SAAS;AAAA,QAC1C,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,KAAK,IAAI,QAAQ,KAAK;AAAA,QACvD,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAQ,OAAO,QAAQ,EAAE,IAAI,SAAS;AAAA,QAC1C;AAAA,MACJ,OAAO;AACH,YAAI,QAAQ,UAAU,MAAM,QAAQ,EAAE;AACtC,YAAI,OAAO;AACP,cAAI,IAAI,MAAM,SAAS,QAAQ,EAAE;AACjC,cAAI,GAAG;AACH,gBAAI,KAAK,aAAa,KAAK;AACvB,kBAAI;AAAA,YACR,WAAW,KAAK,aAAa,MAAM;AAC/B,mBAAK;AAAA,YACT,WAAW,KAAK,aAAa,MAAM;AAC/B,mBAAK;AAAA,YACT,WAAW,KAAK,aAAa,MAAM;AAC/B,mBAAK;AAAA,YACT,WAAW,KAAK,aAAa,MAAM;AAC/B,mBAAK;AAAA,YACT,WAAW,KAAK,aAAa,MAAM;AAC/B,kBAAI,KAAK,IAAI,GAAG,KAAK;AAAA,YACzB,WAAW,KAAK,aAAa,MAAM;AAC/B,mBAAK;AAAA,YACT;AACA,kBAAM,QAAQ,KAAK,MAAM,CAAC;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc,CAAC,MAAW,SAAwB;AAC9C,SAAK,cAAc,KAAK,MAAM,IAAI,GAAG,cAAc,KAAK,MAAM,IAAI,GAAG,cAAc,KAAK,QAAQ,IAAI,GAAG;AACnG,UAAI,IAAI,cAAc,KAAK,MAAM,IAAI;AACrC,UAAI,uBAAG;AAAY;AAAA,eACV,uBAAG;AAAa,eAAO;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,kBAAkB,CAAC,MAAW,SAAwB;AAClD,QAAI,CAAC,MAAM,IAAI,EAAE,SAAS,KAAK,QAAQ,GAAG;AACtC,UAAI,UAAU,cAAc,KAAK,UAAU,iCAAK,OAAL,EAAW,gBAAgB,KAAK,EAAC;AAC5E,UAAI,SAAS;AACT,YAAI,QAAQ,WAAW,QAAW;AAC9B,cAAI,SAAS,QAAQ,OAAO,QAAQ,EAAE;AACtC,cAAI,OAAO,WAAW,UAAU;AAC5B,gBAAI,KAAK,aAAa;AAAM;AAAA,qBACnB,KAAK,aAAa;AAAM;AACjC,oBAAQ,OAAO,QAAQ,EAAE,IAAI;AAAA,UACjC;AAAA,QACJ,OAAO;AACH,cAAI,QAAQ,UAAU,MAAM,QAAQ,EAAE;AACtC,cAAI,OAAO;AACP,gBAAI,IAAI,MAAM,SAAS,QAAQ,EAAE;AACjC,gBAAI,GAAG;AACH,kBAAI,OAAO,MAAM,UAAU;AACvB,oBAAI,KAAK,aAAa;AAAM;AAAA,yBACnB,KAAK,aAAa;AAAM;AACjC,sBAAM,QAAQ,KAAK,MAAM,CAAC;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB,CAAC,MAAW,SAAwB;AAChD,QAAI,OAAO;AACX,QAAI,KAAK,aAAa,QAAW;AAC7B,UAAI,IAAI,cAAc,KAAK,QAAQ,IAAI;AACvC,aAAO,EAAE,GAAG,KAAK,UAAU,IAAI,CAAC,MAAW,cAAc,GAAG,IAAI,CAAC,CAAC;AAAA,IACtE,OAAO;AACH,UAAI,KAAK,OAAO,SAAS,SAAS,cAAc;AAC5C,eAAO,KAAK,OAAO,SAAS;AAAA,MAChC;AACA,UAAI,IAAI,cAAc,KAAK,OAAO,QAAQ,IAAI;AAC9C,aAAO,EAAE,IAAI,EAAE,GAAG,KAAK,UAAU,IAAI,CAAC,MAAW,cAAc,GAAG,IAAI,CAAC,CAAC;AAAA,IAC5E;AAAA,EACJ;AAAA,EACA,kBAAkB,CAAC,MAAW,SAAwB;AAClD,QAAI,OAAO;AACX,QAAI,KAAK,aAAa,QAAW;AAC7B,UAAI,IAAI,cAAc,KAAK,QAAQ,IAAI;AACvC,UAAI,KAAK,gBAAgB;AACrB,eAAO,EAAE,QAAQ,QAAW,IAAI,KAAK,KAAK;AAAA,MAC9C,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ,OAAO;AACH,UAAI,KAAK,UAAU;AACf,eAAO,cAAc,KAAK,UAAU,IAAI;AAAA,MAC5C,OAAO;AACH,YAAI,KAAK,SAAS,SAAS,cAAc;AACrC,iBAAO,KAAK,SAAS;AAAA,QACzB,WAAW,KAAK,SAAS,SAAS,WAAW;AACzC,iBAAO,KAAK,SAAS;AAAA,QACzB;AAAA,MACJ;AACA,UAAI,eAAe,mBAAK;AACxB,aAAO,aAAa,gBAAgB;AACpC,UAAI,IAAI,cAAc,KAAK,QAAQ,YAAY;AAC/C,UAAI,MAAM,QAAQ,CAAC,GAAG;AAClB,YAAI,IAAI,EAAE,IAAI;AACd,YAAI,OAAO,MAAM,YAAY;AACzB,iBAAO,IAAI,SAAqB;AAC5B,oBAAQ,MAAM;AAAA,cACV,KAAK,QAAQ;AACT,uBAAO,EAAE,KAAK,GAAG,IAAI;AAAA,cACzB;AAAA,cACA,KAAK,OAAO;AACR,uBAAO,EAAE,IAAI,GAAG,IAAI;AAAA,cACxB;AAAA,cACA,KAAK,WAAW;AACZ,uBAAO,EAAE,QAAQ,GAAG,IAAI;AAAA,cAC5B;AAAA,cACA,SAAS;AAAA,cAET;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,cAAI,KAAK,gBAAgB;AACrB,mBAAO,EAAE,QAAQ,GAAG,IAAI,KAAK;AAAA,UACjC,OAAO;AACH,mBAAO,EAAE,IAAI;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,YAAI,KAAK,gBAAgB;AACrB,iBAAO,EAAE,QAAQ,GAAG,IAAI,KAAK;AAAA,QACjC,OAAO;AACH,iBAAO,EAAE,IAAI;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB,CAAC,MAAW,SAAwB;AACjD,QAAI,OAAO,cAAc,KAAK,cAAc,IAAI;AAChD,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,UAAI,IAAI,KAAK,MAAM,CAAC;AACpB,UAAI,EAAE,SAAS,cAAc;AACzB,YAAI,WAAW,cAAc,EAAE,MAAM,IAAI;AACzC,YAAI,SAAS,UAAU;AACnB,mBAAS,IAAI,GAAG,IAAI,EAAE,WAAW,SAAS,KAAK;AAC3C,gBAAI,KAAK,EAAE,WAAW,CAAC;AACvB,gBAAI,IAAI,cAAc,IAAI,IAAI;AAC9B,gBAAI,uBAAG;AAAa,qBAAO;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,yBAAyB,CAAC,MAAW,SAAwB;AACzD,QAAI,oBAAoB,IAAI,iBAAS,KAAK,SAAS,QAAQ,iCAAK,KAAK,WAAV,EAAoB,SAAS,KAAK,SAAS,QAAQ,MAAM,EAAE,EAAC;AACvH,QAAI,gBAAgB,IAAI,sBAAc,iCAAK,OAAL,EAAW,UAAU,kBAAkB,EAAC;AAC9E,WAAO,yBAAyB,MAAM,aAAa;AAAA,EACvD;AAAA,EACA,kBAAkB,CAAC,MAAW,SAAwB;AAClD,QAAI,MAAM,CAAC;AACX,SAAK,WAAW,QAAQ,CAAC,aAAkB;AACvC,UAAI,SAAS,SAAS,YAAY;AAC9B,YAAI,SAAS,IAAI,SAAS,cAAc;AACpC,cAAI,SAAS,IAAI,IAAI,IAAI,cAAc,SAAS,OAAO,IAAI;AAAA,QAC/D;AAAA,MACJ,OAAO;AACH,YAAI,SAAS,SAAS,iBAAiB;AACnC,cAAI,SAAS,SAAS,IAAI,IAAI,cAAc,UAAU,IAAI;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,CAAC,MAAW,SAAwB;AACjD,QAAI,SAAS,CAAC;AACd,SAAK,SAAS,QAAQ,CAAC,UAAe;AAClC,UAAI,IAAI,cAAc,OAAO,IAAI;AACjC,UAAK,MAAM,SAAS,mBAAoB,MAAM,QAAQ,CAAC,GAAG;AACtD,eAAO,KAAK,GAAG,CAAC;AAAA,MACpB,OAAO;AACH,eAAO,KAAK,CAAC;AAAA,MACjB;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,eAAe,CAAC,MAAW,SAAwB;AAC/C,QAAI,SAAS,cAAc,KAAK,UAAU,IAAI;AAC9C,QAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,aAAO,CAAC,GAAG,MAAM;AAAA,IACrB,OAAO;AACH,aAAO,mBAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,iBAAiB,CAAC,MAAW,SAAwB;AACjD,WAAO,EAAE,OAAO,cAAc,KAAK,UAAU,IAAI,GAAG,aAAa,KAAK;AAAA,EAC1E;AACJ;AAEA,IAAO,mBAAQ,EAAE,eAAe,cAAc,qCAAc;;;ACpb5D,IAAO,gBAAQ,EAAE,8BAAW,4BAAU,oBAAM,2BAAS;;;ACErD,IAAM,UAAN,MAAM,SAAQ;AAAA,EAqCV,YAAYC,SAAgB,UAAqB,eAAqB;AA1BtE,SAAO,QAAuB,CAAC;AA2B3B,SAAK,UAAUA;AACf,SAAK,YAAY;AACjB,SAAK,WAAU,+CAAe,UAAS,cAAc,SAAS,KAAK,QAAQ,OAAO,eAAe,KAAK,OAAO;AAC7G,QAAI,+CAAe,OAAO;AACtB,WAAK,QAAQ,cAAc;AAAA,IAC/B,OAAO;AACH,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AAAA,EA3CA,IAAW,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAG1C,IAAW,WAAW;AAAE,WAAO,KAAK;AAAA,EAAU;AAAA,EAG9C,IAAW,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAGnC,YAAY,cAAsC;AAAE,SAAK,MAAM,KAAK,IAAI,oBAAY,YAAY,CAAC;AAAA,EAAE;AAAA,EACnG,eAAe;AAAE,SAAK,MAAM,IAAI;AAAA,EAAE;AAAA,EACzC,IAAW,WAAW;AAAE,WAAO,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC;AAAA,EAAE;AAAA,EAC1D,aAAa;AAChB,SAAK,QAAQ,CAAC;AACd,SAAK,YAAY,mBAAK,KAAK,QAAS;AAAA,EACxC;AAAA,EAEO,QAAQ;AACX,SAAK,WAAW;AAAA,EACpB;AAAA,EAEO,QAAQ,KAAU;AACrB,kBAAM,SAAS,aAAa,KAAK,IAAI,cAAM,SAAS,cAAc,EAAE,UAAU,KAAK,UAAU,CAAC,CAAC;AAAA,EACnG;AAAA,EAEO,OAAO;AACV,SAAK,QAAQ,KAAK,OAAO,IAAI,KAAK,IAAI;AAAA,EAC1C;AAAA,EAEO,QAAQ;AACX,QAAI,OAAO,IAAI,SAAQ,KAAK,QAAQ,KAAK,UAAU,EAAE,QAAQ,KAAK,QAAQ,OAAO,IAAI,MAAM,GAAG,KAAK,KAAK,EAAE,CAAC;AAC3G,WAAO;AAAA,EACX;AAYJ;AAGA,IAAO,kBAAQ;;;AClDf,IAAM,WAAN,MAAe;AAAA,EAGX,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAGpC,IAAW,UAAU;AAAE,WAAO,KAAK;AAAA,EAAS;AAAA,EACrC,WAAW,SAAiB;AAAE,SAAK,WAAW;AAAA,EAAQ;AAAA,EAG7D,IAAW,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EAG1C,IAAW,UAAU;AAAE,WAAO,KAAK;AAAA,EAAS;AAAA,EAG5C,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAI7B,cAAc,UAAkB;AACnC,WAAO,KAAK,SAAS,MAAM,CAAC,EAAE,SAAS,QAAQ;AAAA,EACnD;AAAA,EAEO,OAAO,OAA+B,QAAgC,UAA+B;AACxG,SAAK,UAAU,iCACR,KAAK,UADG;AAAA,MAEX;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,aAAa,UAA8B;AAC9C,SAAK,QAAQ,WAAW;AAAA,EAC5B;AAAA,EAEA,YAAYC,SAAgB,eAAqB;AAC7C,SAAK,QAAO,+CAAe,QAAO,cAAc,OAAO,cAAM,UAAU,YAAY;AACnF,SAAK,WAAW,+CAAe;AAC/B,SAAK,UAAUA;AACf,SAAK,QAAO,+CAAe,OAAM,cAAc,MAAM,IAAI,YAAI,KAAK,SAAS,IAAI;AAC/E,SAAK,YAAW,+CAAe,WAAU,cAAc,UAAU,IAAI,gBAAQ,KAAK,SAAS,IAAI;AAC/F,SAAK,UAAU,+CAAe;AAC9B,QAAI,EAAC,+CAAe,UAAS;AACzB,WAAK,SAAS,KAAK;AAAA,IACvB;AACA,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,UAAU,CAAC;AAChB,aAAO,KAAK,KAAK,SAAS,MAAM,CAAC,EAAE,KAAK,EAAE,QAAQ,OAAK;AACnD,YAAI,CAAC,KAAK,SAAS,OAAO,CAAC,KAAM,MAAM,eAAgB;AACnD,eAAK,QAAQ,CAAC,IAAI,KAAK,SAAS,MAAM,CAAC,EAAE,MAAM,CAAC;AAAA,QACpD;AAAA,MACJ,CAAC;AACD,WAAK,UAAU,CAAC;AAAA,IACpB;AACA,SAAK,QAAQ,UAAU,IAAI,CAAC,gBAAuC;AAC/D,cAAQ,IAAI,WAAW;AACvB,WAAK,QAAQ,OAAO,IAAI,kCAAK,KAAK,QAAQ,OAAO,IAAM;AACvD,UAAI,gBAAgB,IAAI,sBAAc,EAAE,UAAU,MAAM,cAAc,KAAK,QAAQ,cAAc,EAAE,CAAC;AACpG,UAAI,YAAY,KAAK,cAAc,QAAQ,EAAE,aAAa;AAC1D,WAAK,QAAQ,OAAO,sBAAsB,MAAM,SAAS;AAAA,IAC7D;AAAA,EACJ;AACJ;AAEA,IAAO,mBAAQ;;;ACtEf,IAAM,gBAAN,MAAoB;AAAA,EAGT,YAAY,UAAoB;AAAE,SAAK,OAAO,SAAS,GAAG,IAAI;AAAA,EAAS;AAAA,EACvE,eAAe,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EACtD,aAAa,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EAE3D,cAAc;AACV,SAAK,SAAS,CAAC;AAAA,EACnB;AACJ;AAEA,IAAO,wBAAQ;;;ACdf,IAAM,YAAN,MAAgB;AAAA,EAGZ,IAAW,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EACjC,QAAQ,MAAY;AAAE,SAAK,OAAO,KAAK,GAAG,IAAI;AAAA,EAAK;AAAA,EACnD,WAAW,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EAClD,SAAS,KAAa;AAAE,WAAO,KAAK,OAAO,GAAG;AAAA,EAAE;AAAA,EAEvD,cAAc;AACV,SAAK,SAAS,CAAC;AAAA,EACnB;AACJ;AAEA,IAAO,oBAAQ;;;ACLf,IAAM,SAAN,MAAa;AAAA,EAGT,IAAW,SAAS;AAAE,WAAO,KAAK;AAAA,EAAQ;AAAA,EACnC,UAAU,QAAgB;AAAE,SAAK,UAAU;AAAA,EAAO;AAAA,EAGzD,IAAW,YAAY;AAAE,WAAO,KAAK;AAAA,EAAW;AAAA,EAGhD,IAAI,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAG7B,IAAW,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EAGxC,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAGpC,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAC7B,OAAO,KAAU;AAAE,SAAK,OAAO;AAAA,EAAI;AAAA,EAEnC,YAAY,OAA+B,QAAgC,UAA+B,SAAe;AAC5H,QAAI,WAAW,IAAI;AAAA,MACf;AAAA,MACA;AAAA,QACI,SAAS,+BAAO;AAAA,QAChB,SAAS,UACL,iCACO,UADP;AAAA,UAEI,OAAO,QAAQ,QAAQ,CAAC;AAAA,UACxB,QAAQ,SAAS,SAAS,CAAC;AAAA,UAC3B,UAAU,WAAW,WAAW,CAAC;AAAA,QACrC,KAAI;AAAA,UACA,OAAO,QAAQ,QAAQ,CAAC;AAAA,UACxB,QAAQ,SAAS,SAAS,CAAC;AAAA,UAC3B,UAAU,WAAW,WAAW,CAAC;AAAA,QACrC;AAAA,MACR;AAAA,IACJ;AACA,SAAK,WAAW,YAAY,QAAQ;AACpC,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,KAAa,QAAgB,KAAW;AAChD,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,aAAa,IAAI,sBAAc;AACpC,SAAK,SAAS,IAAI,kBAAU;AAC5B,SAAK,OAAO,IAAI,YAAI,IAAI;AAAA,EAC5B;AACJ;AAEA,IAAO,iBAAQ;;;ACzDR,IAAM,WAAN,MAAe;AAAA,EAKlB,YAAY,MAAmB,OAAmB;AAC9C,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AACJ;AAEA,IAAM,SAAN,MAAa;AAAA,EAwFT,YAAY,KAAa,SAAoC;AA9D7D,iBAAQ;AAAA,MACJ,UAAU,CAAC;AAAA,MACX,QAAQ,CAAC;AAAA,IACb;AAEA,uBAAc,CAAC;AA6Bf,sBAAsB;AA6BlB,SAAK,OAAO;AACZ,SAAK,WAAW,UAAU,UAAU,CAAC;AAAA,EACzC;AAAA,EAxFA,IAAW,MAAM;AAAE,WAAO,KAAK;AAAA,EAAK;AAAA,EAO7B,WAAW,IAAY;AAAE,WAAO,KAAK,SAAS,EAAE;AAAA,EAAE;AAAA,EAClD,UAAUC,SAAgB;AAC7B,IAAAA,QAAO,UAAU,IAAI;AACrB,SAAK,SAASA,QAAO,GAAG,IAAIA;AAAA,EAChC;AAAA,EACO,aAAa,KAAa;AAAE,WAAO,KAAK,SAAS,GAAG;AAAA,EAAE;AAAA,EAItD,KAAK,SAAc;AACtB,SAAK,aAAa,cAAM,SAAS,MAAM,OAAO;AAC9C,YAAQ,IAAI,KAAK,UAAU,KAAK,UAAU,CAAC;AAC3C,QAAI,IAAI,cAAM,SAAS,eAAe,KAAK,YAAY,IAAI;AAC3D,MAAE,QAAQ,CAACA,YAAmB,KAAK,UAAUA,OAAM,CAAC;AAAA,EACxD;AAAA,EASA,sBAAsB,UAAoB,YAAyB;AAC/D,QAAI,aAAa,KAAK,YAAY,SAAS,IAAI;AAC/C,SAAK,YAAY,SAAS,IAAI,IAAI;AAClC,QAAIC,WAAU,cAAM,KAAK,KAAK,YAAY,UAAU;AACpD,IAAAA,SAAQ,QAAQ,CAAC,MAAW;AACxB,UAAI,EAAE,eAAe,mBAAmB;AACpC,YAAIC,QAAO,OAAO,KAAK,KAAK,MAAM,QAAQ,EAAE,OAAO,OAAK;AACpD,cAAI,EAAE,WAAW,EAAE,OAAO,GAAG;AACzB,mBAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,mBAAO;AAAA,UACX,OAAO;AACH,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AACD,YAAIA,MAAK,SAAS,GAAG;AACjB,cAAI,OAAOA,MAAKA,MAAK,SAAS,CAAC,EAAE,MAAM,GAAG;AAC1C,cAAI,KAAK,SAAS,GAAG;AACjB,gBAAI,QAAQ,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,GAAG;AACnD,mBAAO,KAAK,MAAM,SAAS,KAAK;AAAA,UACpC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,OAAO,WAAW,MAAMD,QAAO;AAAA,EACxC;AAAA,EAKO,IAAI,SAAiB,eAAyC,QAAuC;AACxG,WAAO,IAAI,QAAQ,aAAW;AAC1B,WAAK,iBAAiB;AACtB,WAAK,SAAS;AACd,WAAK,aAAa;AAClB,WAAK,MAAM,WAAW,CAAC;AACvB,WAAK,MAAM,SAAS,CAAC;AACrB,UAAI,aAAa,KAAK,SAAS,OAAO;AACtC,WAAK,mBAAmB,WAAW,YAAY;AAC/C,UAAI,qBAAqB,cAAM,UAAU,cAAc,KAAK,gBAAgB;AAC5E,WAAK,MAAM,OAAO,KAAK,MAAM,KAAK,iBAAiB,cAAc,SAAS,EAAE,kBAAkB,CAAC;AAC/F,WAAK,iBAAiB,cAAc,aAAa,EAAE,kBAAkB;AACrE,UAAI,OAAO,KAAK,iBAAiB,cAAc,QAAQ,EAAE,kBAAkB;AAC3E,WAAK,YAAY,KAAK,iBAAiB,IAAI,IAAI;AAC/C;AAAA,QACI,IAAI;AAAA,UACA;AAAA,UACA,MAAM;AACF,iBAAK,aAAa;AAClB,iBAAK,MAAM,OAAO,QAAQ,EAAE,QAAQ,CAAC,YAAiB,QAAQ,CAAC;AAAA,UACnE;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAMJ;AAEA,IAAO,iBAAQ;;;AC/Gf,IAAM,cAAN,MAAkB;AAElB;AAEA,IAAO,sBAAQ;;;ACAf,IAAM,cAAN,MAAM,oBAAmB,oBAAY;AAAA,EAWjC,OAAc,YAAY,gBAAuC,iBAAwC,UAA8B;AACnI,WAAO,cAAM,UAAU,eAAe,YAAW,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAC3I;AACJ;AAdM,YAEqB,OAAO;AAF5B,YAGY,eAAe,CAE7B;AALE,YAMY,gBAAgB;AAAA,EAC1B,OAAO;AAAA,EACP,QAAQ;AACZ;AATJ,IAAM,aAAN;AAgBA,IAAO,qBAAQ;;;ACpBf,IAAe,WAAf,MAAwB;AAAA,EAGpB,IAAW,OAAO;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAKtC,YAAY,MAAc;AACtB,SAAK,QAAQ;AAAA,EACjB;AACJ;AAEA,IAAO,mBAAQ;;;ACXf,IAAM,aAAN,cAAyB,iBAAS;AAAA,EAU9B,YAAY,cAAsB;AAC9B,UAAM,QAAQ;AACd,SAAK,SAAS;AACd,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAXA,IAAW,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EACjC,SAAS,GAAQ;AAAE,SAAK,SAAS;AAAA,EAAC;AAAA,EAClC,WAAW;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAGtC,IAAW,eAAe;AAAE,WAAO,KAAK;AAAA,EAAc;AAO1D;AAEA,IAAO,qBAAQ;;;ACjBf,IAAM,WAAN,cAAuB,iBAAS;AAAA,EAU5B,YAAY,cAA2B;AACnC,UAAM,UAAU;AAChB,SAAK,SAAS;AACd,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAXA,IAAW,QAAQ;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EACjC,SAAS,GAAQ;AAAE,SAAK,SAAS;AAAA,EAAC;AAAA,EAClC,WAAW;AAAE,WAAO,KAAK;AAAA,EAAM;AAAA,EAGtC,IAAW,eAAe;AAAE,WAAO,KAAK;AAAA,EAAc;AAO1D;AAEA,IAAO,mBAAQ;;;ACbf,IAAM,iBAAN,MAAM,uBAAsB,oBAAY;AAAA,EAapC,OAAO,YAAY,gBAAuC,iBAAwC,UAA8B;AAC5H,WAAO,cAAM,UAAU,eAAe,eAAc,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAC9I;AACJ;AAhBM,eAEqB,OAAO;AAF5B,eAGY,eAAe;AAAA,EACzB,SAAS,IAAI,mBAAW,EAAE;AAAA,EAC1B,SAAS,IAAI,mBAAW,QAAQ;AAAA,EAChC,SAAS,IAAI,iBAAS,MAAS;AACnC;AAPE,eAQY,gBAAgB;AAAA,EAC1B,OAAO;AAAA,EACP,QAAQ;AACZ;AAXJ,IAAM,gBAAN;AAkBA,IAAO,wBAAQ;;;ACpBf,IAAM,eAAN,MAAM,qBAAoB,oBAAY;AAAA,EAclC,OAAc,YAAY,gBAAuC,iBAAwC,UAA8B;AACnI,WAAO,cAAM,UAAU,eAAe,aAAY,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAC5I;AACJ;AAjBM,aAEqB,OAAO;AAF5B,aAGY,eAAe,CAE7B;AALE,aAMY,gBAAgB;AAAA,EAC1B,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,iBAAiB;AAAA,EACjB,cAAc;AAClB;AAZJ,IAAM,cAAN;AAmBA,IAAO,sBAAQ;;;AClBf,IAAM,eAAN,MAAM,qBAAoB,oBAAY;AAAA,EAUlC,OAAc,YAAY,gBAAuC,iBAAwC,UAA8B;AACnI,WAAO,cAAM,UAAU,eAAe,aAAY,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAC5I;AACJ;AAbM,aAEqB,OAAO;AAF5B,aAGY,eAAe;AAAA,EACzB,UAAU,IAAI,iBAAS,MAAS;AACpC;AALE,aAMY,gBAAgB,CAE9B;AARJ,IAAM,cAAN;AAeA,IAAO,sBAAQ;;;AChBf,IAAM,qBAAN,MAAM,2BAA0B,oBAAY;AAAA,EAUxC,OAAc,YAAY,gBAAuC,iBAAwC,UAA8B;AACnI,WAAO,cAAM,UAAU,eAAe,mBAAkB,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAClJ;AACJ;AAbM,mBAEqB,OAAO;AAF5B,mBAGY,eAAe,CAE7B;AALE,mBAMY,gBAAgB,CAE9B;AARJ,IAAM,oBAAN;AAeA,IAAO,4BAAQ;;;ACdf,IAAM,eAAN,MAAM,qBAAoB,oBAAY;AAAA,EAWlC,OAAc,YAAY,gBAAuC,iBAAwC,UAA8B;AACnI,WAAO,cAAM,UAAU,eAAe,aAAY,MAAM,KAAK,cAAc,gBAAgB,KAAK,eAAe,iBAAiB,QAAQ;AAAA,EAC5I;AACJ;AAdM,aAEqB,OAAO;AAF5B,aAGY,eAAe;AAAA,EACzB,MAAM,IAAI,mBAAW,EAAE;AAC3B;AALE,aAMY,gBAAgB;AAAA,EAC1B,OAAO;AAAA,EACP,QAAQ;AACZ;AATJ,IAAM,cAAN;AAgBA,IAAO,sBAAQ;;;ACdf,IAAO,mBAAQ;AAAA,EACX,CAAC,oBAAY,IAAI,GAAG;AAAA,EACpB,CAAC,sBAAc,IAAI,GAAG;AAAA,EACtB,CAAC,mBAAW,IAAI,GAAG;AAAA,EACnB,CAAC,oBAAY,IAAI,GAAG;AAAA,EACpB,CAAC,oBAAY,IAAI,GAAG;AAAA,EACpB,CAAC,0BAAkB,IAAI,GAAG;AAC9B;;;ACZA,IAAM,UAAN,MAAc;AAAA,EAGV,IAAW,MAAM;AAAE,WAAO,KAAK,QAAQ;AAAA,EAAI;AAAA,EAE3C,YAAYE,SAAgB;AACxB,SAAK,UAAUA;AAAA,EACnB;AACJ;AAEA,IAAO,kBAAQ;","names":["module","isUnitlessNumber","AcornParser","isUnitlessNumber","module","module","module","updates","keys","module"]}